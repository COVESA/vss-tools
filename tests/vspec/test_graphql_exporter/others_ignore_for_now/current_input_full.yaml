Vehicle:
  description: High-level vehicle data.
  type: branch

Vehicle.ADAS:
  description: All Advanced Driver Assist Systems data.
  type: branch

Vehicle.ADAS.ABS:
  description: Antilock Braking System signals.
  type: branch

Vehicle.ADAS.ABS.IsEnabled:
  datatype: boolean
  description: Indicates if ABS is enabled. True = Enabled. False = Disabled.
  type: actuator

Vehicle.ADAS.ABS.IsEngaged:
  datatype: boolean
  description: Indicates if ABS is currently regulating brake pressure. True = Engaged. False = Not Engaged.
  type: sensor

Vehicle.ADAS.ABS.IsError:
  datatype: boolean
  description: Indicates if ABS incurred an error condition. True = Error. False = No Error.
  type: sensor

Vehicle.ADAS.ActiveAutonomyLevel:
  allowed:
  - SAE_0
  - SAE_1
  - SAE_2_DISENGAGING
  - SAE_2
  - SAE_3_DISENGAGING
  - SAE_3
  - SAE_4_DISENGAGING
  - SAE_4
  - SAE_5_DISENGAGING
  - SAE_5
  comment: Complies with https://www.sae.org/standards/content/j3016_202104/ and https://www.sae.org/blog/sae-j3016-update. Level 5 and 4 ADS (Automated driving system) disengage, if appropriate, only after it achieves a minimal risk condition or a driver is performing the DDT. Level 3 ADS disengages either an appropriate time after issuing a request to intervene or immediately upon user request. Level 2 DAS (Driving automation system) disengages immediately upon driver request. However, since many Level 2 DAS, often termed "Level 2.5", warn the driver shortly before reaching their operational limits, the VSS also supports the DISENGAGING state for SAE_2. Nevertheless, it should be noted that the SAE J3016 states that it is incorrect to describe driving automation features using fractional levels.
  datatype: string
  description: Indicates the currently active level of driving automation according to the SAE J3016 (Taxonomy and Definitions for Terms Related to Driving Automation Systems for On-Road Motor Vehicles).
  type: sensor

Vehicle.ADAS.CruiseControl:
  description: Signals from Cruise Control system.
  type: branch

Vehicle.ADAS.CruiseControl.AdaptiveDistanceSet:
  datatype: float
  description: Distance in meters to keep from lead vehicle
  min: 0.0
  type: actuator
  unit: m

Vehicle.ADAS.CruiseControl.AdaptiveIntervalSet:
  datatype: uint8
  description: Follow distance setting, commonly 1-5 with 1 being closest.
  type: actuator

Vehicle.ADAS.CruiseControl.IsActive:
  datatype: boolean
  description: Indicates if cruise control system is active (i.e. actively controls speed). True = Active. False = Inactive.
  type: actuator

Vehicle.ADAS.CruiseControl.IsAdaptive:
  datatype: boolean
  description: Indicates if cruise control system is adaptive (i.e. actively controls speed).
  type: actuator

Vehicle.ADAS.CruiseControl.IsEnabled:
  datatype: boolean
  description: Indicates if cruise control system is enabled (e.g. ready to receive configurations and settings) True = Enabled. False = Disabled.
  type: actuator

Vehicle.ADAS.CruiseControl.IsError:
  datatype: boolean
  description: Indicates if cruise control system incurred an error condition. True = Error. False = No Error.
  type: sensor

Vehicle.ADAS.CruiseControl.SpeedSet:
  datatype: float
  description: Set cruise control speed in kilometers per hour.
  type: actuator
  unit: km/h

Vehicle.ADAS.DMS:
  description: Driver Monitoring System signals.
  type: branch

Vehicle.ADAS.DMS.IsEnabled:
  datatype: boolean
  description: Indicates if DMS is enabled. True = Enabled. False = Disabled.
  type: actuator

Vehicle.ADAS.DMS.IsError:
  datatype: boolean
  description: Indicates if DMS incurred an error condition. True = Error. False = No Error.
  type: sensor

Vehicle.ADAS.DMS.IsWarning:
  datatype: boolean
  description: Indicates if DMS has registered a driver alert condition.
  type: sensor

Vehicle.ADAS.EBA:
  description: Emergency Brake Assist (EBA) System signals.
  type: branch

Vehicle.ADAS.EBA.IsEnabled:
  datatype: boolean
  description: Indicates if EBA is enabled. True = Enabled. False = Disabled.
  type: actuator

Vehicle.ADAS.EBA.IsEngaged:
  datatype: boolean
  description: Indicates if EBA is currently regulating brake pressure. True = Engaged. False = Not Engaged.
  type: sensor

Vehicle.ADAS.EBA.IsError:
  datatype: boolean
  description: Indicates if EBA incurred an error condition. True = Error. False = No Error.
  type: sensor

Vehicle.ADAS.EBD:
  description: Electronic Brakeforce Distribution (EBD) System signals.
  type: branch

Vehicle.ADAS.EBD.IsEnabled:
  datatype: boolean
  description: Indicates if EBD is enabled. True = Enabled. False = Disabled.
  type: actuator

Vehicle.ADAS.EBD.IsEngaged:
  datatype: boolean
  description: Indicates if EBD is currently regulating vehicle brakeforce distribution. True = Engaged. False = Not Engaged.
  type: sensor

Vehicle.ADAS.EBD.IsError:
  datatype: boolean
  description: Indicates if EBD incurred an error condition. True = Error. False = No Error.
  type: sensor

Vehicle.ADAS.ESC:
  description: Electronic Stability Control System signals.
  type: branch

Vehicle.ADAS.ESC.IsEnabled:
  datatype: boolean
  description: Indicates if ESC is enabled. True = Enabled. False = Disabled.
  type: actuator

Vehicle.ADAS.ESC.IsEngaged:
  datatype: boolean
  description: Indicates if ESC is currently regulating vehicle stability. True = Engaged. False = Not Engaged.
  type: sensor

Vehicle.ADAS.ESC.IsError:
  datatype: boolean
  description: Indicates if ESC incurred an error condition. True = Error. False = No Error.
  type: sensor

Vehicle.ADAS.ESC.IsStrongCrossWindDetected:
  datatype: boolean
  description: Indicates if the ESC system is detecting strong cross winds. True = Strong cross winds detected. False = No strong cross winds detected.
  type: sensor

Vehicle.ADAS.ESC.RoadFriction:
  description: Road friction values reported by the ESC system.
  type: branch

Vehicle.ADAS.ESC.RoadFriction.LowerBound:
  datatype: float
  description: Lower bound road friction, as calculated by the ESC system. 5% possibility that road friction is below this value. 0 = no friction, 100 = maximum friction.
  max: 100
  min: 0
  type: sensor
  unit: percent

Vehicle.ADAS.ESC.RoadFriction.MostProbable:
  datatype: float
  description: Most probable road friction, as calculated by the ESC system. Exact meaning of most probable is implementation specific. 0 = no friction, 100 = maximum friction.
  max: 100
  min: 0
  type: sensor
  unit: percent

Vehicle.ADAS.ESC.RoadFriction.UpperBound:
  datatype: float
  description: Upper bound road friction, as calculated by the ESC system. 95% possibility that road friction is below this value. 0 = no friction, 100 = maximum friction.
  max: 100
  min: 0
  type: sensor
  unit: percent

Vehicle.ADAS.IsAutoPowerOptimize:
  datatype: boolean
  description: Auto Power Optimization Flag When set to 'true', the system enables automatic power optimization, dynamically adjusting the power optimization level based on runtime conditions or features managed by the OEM. When set to 'false', manual control of the power optimization level is allowed.
  type: actuator

Vehicle.ADAS.LaneDepartureDetection:
  description: Signals from Lane Departure Detection System.
  type: branch

Vehicle.ADAS.LaneDepartureDetection.IsEnabled:
  datatype: boolean
  description: Indicates if lane departure detection system is enabled. True = Enabled. False = Disabled.
  type: actuator

Vehicle.ADAS.LaneDepartureDetection.IsError:
  datatype: boolean
  description: Indicates if lane departure system incurred an error condition. True = Error. False = No Error.
  type: sensor

Vehicle.ADAS.LaneDepartureDetection.IsWarning:
  datatype: boolean
  description: Indicates if lane departure detection registered a lane departure.
  type: sensor

Vehicle.ADAS.ObstacleDetection:
  description: Signals form Obstacle Sensor System.
  instances:
  - - Front
    - Rear
  - - Left
    - Center
    - Right
  type: branch

Vehicle.ADAS.ObstacleDetection.Distance:
  datatype: float
  description: Distance in meters to detected object
  min: 0.0
  type: sensor
  unit: m

Vehicle.ADAS.ObstacleDetection.IsEnabled:
  datatype: boolean
  description: Indicates if obstacle sensor system is enabled (i.e. monitoring for obstacles). True = Enabled. False = Disabled.
  type: actuator

Vehicle.ADAS.ObstacleDetection.IsError:
  datatype: boolean
  description: Indicates if obstacle sensor system incurred an error condition. True = Error. False = No Error.
  type: sensor

Vehicle.ADAS.ObstacleDetection.IsWarning:
  datatype: boolean
  description: Indicates if obstacle sensor system registered an obstacle.
  type: sensor

Vehicle.ADAS.ObstacleDetection.TimeGap:
  datatype: uint32
  description: Time in milliseconds before potential impact object
  type: sensor
  unit: ms

Vehicle.ADAS.ObstacleDetection.WarningType:
  allowed:
  - UNDEFINED
  - CROSS_TRAFFIC
  - BLIND_SPOT
  comment: Undefined obstacle warning type would merely alert of presence of obstacle and may measure distance.
  datatype: string
  description: Indicates the type of obstacle warning detected as some track not only the presence of an obstacle but potential intercepting trajectory or other characteristics.
  type: sensor

Vehicle.ADAS.PowerOptimizeLevel:
  datatype: uint8
  description: Power optimization level for this branch/subsystem. A higher number indicates more aggressive power optimization. Level 0 indicates that all functionality is enabled, no power optimization enabled. Level 10 indicates most aggressive power optimization mode, only essential functionality enabled.
  max: 10
  min: 0
  type: actuator

Vehicle.ADAS.SupportedAutonomyLevel:
  allowed:
  - SAE_0
  - SAE_1
  - SAE_2
  - SAE_3
  - SAE_4
  - SAE_5
  datatype: string
  description: Indicates the highest level of driving automation according to the SAE J3016 taxonomy the vehicle is capable of.
  type: attribute

Vehicle.ADAS.TCS:
  description: Traction Control System signals.
  type: branch

Vehicle.ADAS.TCS.IsEnabled:
  datatype: boolean
  description: Indicates if TCS is enabled. True = Enabled. False = Disabled.
  type: actuator

Vehicle.ADAS.TCS.IsEngaged:
  datatype: boolean
  description: Indicates if TCS is currently regulating traction. True = Engaged. False = Not Engaged.
  type: sensor

Vehicle.ADAS.TCS.IsError:
  datatype: boolean
  description: Indicates if TCS incurred an error condition. True = Error. False = No Error.
  type: sensor

Vehicle.Acceleration:
  description: Spatial acceleration. Axis definitions according to ISO 8855.
  type: branch

Vehicle.Acceleration.Lateral:
  datatype: float
  description: Vehicle acceleration in Y (lateral acceleration).
  type: sensor
  unit: m/s^2

Vehicle.Acceleration.Longitudinal:
  datatype: float
  description: Vehicle acceleration in X (longitudinal acceleration).
  type: sensor
  unit: m/s^2

Vehicle.Acceleration.Vertical:
  datatype: float
  description: Vehicle acceleration in Z (vertical acceleration).
  type: sensor
  unit: m/s^2

Vehicle.AngularVelocity:
  description: Spatial rotation. Axis definitions according to ISO 8855.
  type: branch

Vehicle.AngularVelocity.Pitch:
  datatype: float
  description: Vehicle rotation rate along Y (lateral).
  type: sensor
  unit: degrees/s

Vehicle.AngularVelocity.Roll:
  datatype: float
  description: Vehicle rotation rate along X (longitudinal).
  type: sensor
  unit: degrees/s

Vehicle.AngularVelocity.Yaw:
  datatype: float
  description: Vehicle rotation rate along Z (vertical).
  type: sensor
  unit: degrees/s

Vehicle.AverageSpeed:
  comment: A new trip is considered to start when engine gets enabled (e.g. LowVoltageSystemState in ON or START mode). A trip is considered to end when engine is no longer enabled. The signal may however keep the value of the last trip until a new trip is started. Calculation of average speed may exclude periods when the vehicle for example is not moving or transmission is in neutral.
  datatype: float
  description: Average speed for the current trip.
  type: sensor
  unit: km/h

Vehicle.Body:
  description: All body components.
  type: branch

Vehicle.Body.BodyType:
  datatype: string
  description: Body type code as defined by ISO 3779.
  type: attribute

Vehicle.Body.Hood:
  comment: The hood is the hinged cover over the engine compartment of a motor vehicles. Depending on vehicle, it can be either in the front or back of the vehicle. Luggage compartments are in VSS called trunks, even if they are located at the front of the vehicle.
  description: Hood status. Start position for Hood is Closed.
  type: branch

Vehicle.Body.Hood.IsOpen:
  datatype: boolean
  description: Is item open or closed? True = Fully or partially open. False = Fully closed.
  type: actuator

Vehicle.Body.Hood.Position:
  comment: Relationship between Open/Close and Start/End position is item dependent.
  datatype: uint8
  description: Item position. 0 = Start position 100 = End position.
  max: 100
  min: 0
  type: actuator
  unit: percent

Vehicle.Body.Hood.Switch:
  allowed:
  - INACTIVE
  - CLOSE
  - OPEN
  - ONE_SHOT_CLOSE
  - ONE_SHOT_OPEN
  datatype: string
  description: Switch controlling sliding action such as window, sunroof, or blind.
  type: actuator

Vehicle.Body.Horn:
  description: Horn signals.
  type: branch

Vehicle.Body.Horn.IsActive:
  datatype: boolean
  description: Horn active or inactive. True = Active. False = Inactive.
  type: actuator

Vehicle.Body.IsAutoPowerOptimize:
  datatype: boolean
  description: Auto Power Optimization Flag When set to 'true', the system enables automatic power optimization, dynamically adjusting the power optimization level based on runtime conditions or features managed by the OEM. When set to 'false', manual control of the power optimization level is allowed.
  type: actuator

Vehicle.Body.Lights:
  description: Exterior lights.
  type: branch

Vehicle.Body.Lights.Backup:
  description: Backup lights.
  type: branch

Vehicle.Body.Lights.Backup.IsDefect:
  datatype: boolean
  description: Indicates if light is defect. True = Light is defect. False = Light has no defect.
  type: sensor

Vehicle.Body.Lights.Backup.IsOn:
  datatype: boolean
  description: Indicates if light is on or off. True = On. False = Off.
  type: actuator

Vehicle.Body.Lights.Beam:
  description: Beam lights.
  instances:
  - Low
  - High
  type: branch

Vehicle.Body.Lights.Beam.IsDefect:
  datatype: boolean
  description: Indicates if light is defect. True = Light is defect. False = Light has no defect.
  type: sensor

Vehicle.Body.Lights.Beam.IsOn:
  datatype: boolean
  description: Indicates if light is on or off. True = On. False = Off.
  type: actuator

Vehicle.Body.Lights.Brake:
  description: Brake lights.
  type: branch

Vehicle.Body.Lights.Brake.IsActive:
  allowed:
  - INACTIVE
  - ACTIVE
  - ADAPTIVE
  datatype: string
  description: Indicates if break-light is active. INACTIVE means lights are off. ACTIVE means lights are on. ADAPTIVE means that break-light is indicating emergency-breaking.
  type: actuator

Vehicle.Body.Lights.Brake.IsDefect:
  datatype: boolean
  description: Indicates if light is defect. True = Light is defect. False = Light has no defect.
  type: sensor

Vehicle.Body.Lights.DirectionIndicator:
  description: Indicator lights.
  instances:
  - Left
  - Right
  type: branch

Vehicle.Body.Lights.DirectionIndicator.IsDefect:
  datatype: boolean
  description: Indicates if light is defect. True = Light is defect. False = Light has no defect.
  type: sensor

Vehicle.Body.Lights.DirectionIndicator.IsSignaling:
  datatype: boolean
  description: Indicates if light is signaling or off. True = signaling. False = Off.
  type: actuator

Vehicle.Body.Lights.Fog:
  description: Fog lights.
  instances:
  - Rear
  - Front
  type: branch

Vehicle.Body.Lights.Fog.IsDefect:
  datatype: boolean
  description: Indicates if light is defect. True = Light is defect. False = Light has no defect.
  type: sensor

Vehicle.Body.Lights.Fog.IsOn:
  datatype: boolean
  description: Indicates if light is on or off. True = On. False = Off.
  type: actuator

Vehicle.Body.Lights.Hazard:
  description: Hazard lights.
  type: branch

Vehicle.Body.Lights.Hazard.IsDefect:
  datatype: boolean
  description: Indicates if light is defect. True = Light is defect. False = Light has no defect.
  type: sensor

Vehicle.Body.Lights.Hazard.IsSignaling:
  datatype: boolean
  description: Indicates if light is signaling or off. True = signaling. False = Off.
  type: actuator

Vehicle.Body.Lights.IsHighBeamSwitchOn:
  comment: This signal indicates the status of the switch and does not indicate if low or high beam actually are on. That typically depends on vehicle logic and other signals like Lights.LightSwitch and Vehicle.LowVoltageSystemState.
  datatype: boolean
  description: Status of the high beam switch. True = high beam enabled. False = high beam not enabled.
  type: actuator

Vehicle.Body.Lights.LicensePlate:
  description: License plate lights.
  type: branch

Vehicle.Body.Lights.LicensePlate.IsDefect:
  datatype: boolean
  description: Indicates if light is defect. True = Light is defect. False = Light has no defect.
  type: sensor

Vehicle.Body.Lights.LicensePlate.IsOn:
  datatype: boolean
  description: Indicates if light is on or off. True = On. False = Off.
  type: actuator

Vehicle.Body.Lights.LightSwitch:
  allowed:
  - 'OFF'
  - POSITION
  - DAYTIME_RUNNING_LIGHTS
  - AUTO
  - BEAM
  comment: A vehicle typically does not support all alternatives. Which lights that actually are lit may vary according to vehicle configuration and local legislation. OFF is typically indicated by 0. POSITION is typically indicated by ISO 7000 symbol 0456. DAYTIME_RUNNING_LIGHTS (DRL) can be indicated by ISO 7000 symbol 2611. AUTO indicates that vehicle automatically selects suitable lights. BEAM is typically indicated by ISO 7000 symbol 0083.
  datatype: string
  description: Status of the vehicle main light switch.
  type: actuator

Vehicle.Body.Lights.Parking:
  description: Parking lights.
  type: branch

Vehicle.Body.Lights.Parking.IsDefect:
  datatype: boolean
  description: Indicates if light is defect. True = Light is defect. False = Light has no defect.
  type: sensor

Vehicle.Body.Lights.Parking.IsOn:
  datatype: boolean
  description: Indicates if light is on or off. True = On. False = Off.
  type: actuator

Vehicle.Body.Lights.Running:
  description: Daytime running lights (DRL).
  type: branch

Vehicle.Body.Lights.Running.IsDefect:
  datatype: boolean
  description: Indicates if light is defect. True = Light is defect. False = Light has no defect.
  type: sensor

Vehicle.Body.Lights.Running.IsOn:
  datatype: boolean
  description: Indicates if light is on or off. True = On. False = Off.
  type: actuator

Vehicle.Body.Mirrors:
  description: All mirrors.
  instances:
  - DriverSide
  - PassengerSide
  type: branch

Vehicle.Body.Mirrors.IsFolded:
  datatype: boolean
  description: Is mirror folded? True = Fully or partially folded. False = Fully unfolded.
  type: actuator

Vehicle.Body.Mirrors.IsHeatingOn:
  datatype: boolean
  description: Mirror Heater on or off. True = Heater On. False = Heater Off.
  type: actuator

Vehicle.Body.Mirrors.IsLocked:
  datatype: boolean
  description: Is mirror movement locked? True = Locked, mirror will not react to Tilt/Pan change. False = Unlocked.
  type: actuator

Vehicle.Body.Mirrors.Pan:
  datatype: int8
  description: Mirror pan as a percent. 0 = Center Position. 100 = Fully Left Position. -100 = Fully Right Position.
  max: 100
  min: -100
  type: actuator
  unit: percent

Vehicle.Body.Mirrors.Tilt:
  datatype: int8
  description: Mirror tilt as a percent. 0 = Center Position. 100 = Fully Upward Position. -100 = Fully Downward Position.
  max: 100
  min: -100
  type: actuator
  unit: percent

Vehicle.Body.PowerOptimizeLevel:
  datatype: uint8
  description: Power optimization level for this branch/subsystem. A higher number indicates more aggressive power optimization. Level 0 indicates that all functionality is enabled, no power optimization enabled. Level 10 indicates most aggressive power optimization mode, only essential functionality enabled.
  max: 10
  min: 0
  type: actuator

Vehicle.Body.Raindetection:
  description: Rain sensor signals.
  type: branch

Vehicle.Body.Raindetection.Intensity:
  datatype: uint8
  description: Rain intensity. 0 = Dry, No Rain. 100 = Covered.
  max: 100
  type: sensor
  unit: percent

Vehicle.Body.RearMainSpoilerPosition:
  datatype: float
  description: Rear spoiler position, 0% = Spoiler fully stowed. 100% = Spoiler fully exposed.
  max: 100
  min: 0
  type: actuator
  unit: percent

Vehicle.Body.Trunk:
  comment: A trunk is a luggage compartment in a vehicle. Depending on vehicle, it can be either in the front or back of the vehicle. Some vehicles may have trunks both at the front and at the rear of the vehicle.
  description: Trunk status. Start position for Trunk is Closed.
  instances:
  - Front
  - Rear
  type: branch

Vehicle.Body.Trunk.IsLightOn:
  comment: V4.0 Moved from Vehicle.Cabin.Lights.IsTrunkOn because Trunk is not defined as part of the Cabin.
  datatype: boolean
  description: Is trunk light on
  type: actuator

Vehicle.Body.Trunk.IsLocked:
  datatype: boolean
  description: Is item locked or unlocked. True = Locked. False = Unlocked.
  type: actuator

Vehicle.Body.Trunk.IsOpen:
  datatype: boolean
  description: Is item open or closed? True = Fully or partially open. False = Fully closed.
  type: actuator

Vehicle.Body.Trunk.Position:
  comment: Relationship between Open/Close and Start/End position is item dependent.
  datatype: uint8
  description: Item position. 0 = Start position 100 = End position.
  max: 100
  min: 0
  type: actuator
  unit: percent

Vehicle.Body.Trunk.Switch:
  allowed:
  - INACTIVE
  - CLOSE
  - OPEN
  - ONE_SHOT_CLOSE
  - ONE_SHOT_OPEN
  datatype: string
  description: Switch controlling sliding action such as window, sunroof, or blind.
  type: actuator

Vehicle.Body.Windshield:
  description: Windshield signals.
  instances:
  - Front
  - Rear
  type: branch

Vehicle.Body.Windshield.IsHeatingOn:
  datatype: boolean
  description: Windshield heater status. False - off, True - on.
  type: actuator

Vehicle.Body.Windshield.WasherFluid:
  description: Windshield washer fluid signals
  type: branch

Vehicle.Body.Windshield.WasherFluid.IsLevelLow:
  datatype: boolean
  description: Low level indication for washer fluid. True = Level Low. False = Level OK.
  type: sensor

Vehicle.Body.Windshield.WasherFluid.Level:
  datatype: uint8
  description: Washer fluid level as a percent. 0 = Empty. 100 = Full.
  max: 100
  type: sensor
  unit: percent

Vehicle.Body.Windshield.Wiping:
  description: Windshield wiper signals.
  type: branch

Vehicle.Body.Windshield.Wiping.Intensity:
  datatype: uint8
  description: Relative intensity/sensitivity for interval and rain sensor mode as requested by user/driver. Has no significance if Windshield.Wiping.Mode is OFF/SLOW/MEDIUM/FAST 0 - wipers inactive. 1 - minimum intensity (lowest frequency/sensitivity, longest interval). 2/3/4/... - higher intensity (higher frequency/sensitivity, shorter interval). Maximum value supported is vehicle specific.
  type: actuator

Vehicle.Body.Windshield.Wiping.IsWipersWorn:
  datatype: boolean
  description: Wiper wear status. True = Worn, Replacement recommended or required. False = Not Worn.
  type: sensor

Vehicle.Body.Windshield.Wiping.Mode:
  allowed:
  - 'OFF'
  - SLOW
  - MEDIUM
  - FAST
  - INTERVAL
  - RAIN_SENSOR
  datatype: string
  description: Wiper mode requested by user/driver. INTERVAL indicates intermittent wiping, with fixed time interval between each wipe. RAIN_SENSOR indicates intermittent wiping based on rain intensity.
  type: actuator

Vehicle.Body.Windshield.Wiping.System:
  comment: These signals are typically not directly available to the user/driver of the vehicle. The overlay in overlays/extensions/dual_wiper_systems.vspec can be used to modify this branch to support two instances; Primary and Secondary.
  description: Signals to control behavior of wipers in detail. By default VSS expects only one instance.
  type: branch

Vehicle.Body.Windshield.Wiping.System.ActualPosition:
  comment: Default parking position might be used as reference position.
  datatype: float
  description: Actual position of main wiper blade for the wiper system relative to reference position. Location of reference position (0 degrees) and direction of positive/negative degrees is vehicle specific.
  type: actuator
  unit: degrees

Vehicle.Body.Windshield.Wiping.System.DriveCurrent:
  comment: May be negative in special situations.
  datatype: float
  description: Actual current used by wiper drive.
  type: sensor
  unit: A

Vehicle.Body.Windshield.Wiping.System.Frequency:
  comment: Examples - 0 = Wipers stopped, 80 = Wipers doing 80 cycles per minute (in WIPE mode).
  datatype: uint8
  description: Wiping frequency/speed, measured in cycles per minute. The signal concerns the actual speed of the wiper blades when moving. Intervals/pauses are excluded, i.e. the value corresponds to the number of cycles that would be completed in 1 minute if wiping permanently over default range.
  type: actuator
  unit: cpm

Vehicle.Body.Windshield.Wiping.System.IsBlocked:
  datatype: boolean
  description: Indicates if wiper movement is blocked. True = Movement blocked. False = Movement not blocked.
  type: sensor

Vehicle.Body.Windshield.Wiping.System.IsEndingWipeCycle:
  comment: In continuous wiping between A and B this sensor can be used a trigger to update TargetPosition.
  datatype: boolean
  description: Indicates if current wipe movement is completed or near completion. True = Movement is completed or near completion. Changes to RequestedPosition will be executed first after reaching previous RequestedPosition, if it has not already been reached. False = Movement is not near completion. Any change to RequestedPosition will be executed immediately. Change of direction may not be allowed.
  type: sensor

Vehicle.Body.Windshield.Wiping.System.IsOverheated:
  datatype: boolean
  description: Indicates if wiper system is overheated. True = Wiper system overheated. False = Wiper system not overheated.
  type: sensor

Vehicle.Body.Windshield.Wiping.System.IsPositionReached:
  datatype: boolean
  description: Indicates if a requested position has been reached. IsPositionReached refers to the previous position in case the TargetPosition is updated while IsEndingWipeCycle=True. True = Current or Previous TargetPosition reached. False = Position not (yet) reached, or wipers have moved away from the reached position.
  type: sensor

Vehicle.Body.Windshield.Wiping.System.IsWiperError:
  datatype: boolean
  description: Indicates system failure. True if wiping is disabled due to system failure.
  type: sensor

Vehicle.Body.Windshield.Wiping.System.IsWiping:
  datatype: boolean
  description: Indicates wiper movement. True if wiper blades are moving. Change of direction shall be considered as IsWiping if wipers will continue to move directly after the change of direction.
  type: sensor

Vehicle.Body.Windshield.Wiping.System.Mode:
  allowed:
  - STOP_HOLD
  - WIPE
  - PLANT_MODE
  - EMERGENCY_STOP
  datatype: string
  description: Requested mode of wiper system. STOP_HOLD means that the wipers shall move to position given by TargetPosition and then hold the position. WIPE means that wipers shall move to the position given by TargetPosition and then hold the position if no new TargetPosition is requested. PLANT_MODE means that wiping is disabled. Exact behavior is vehicle specific. EMERGENCY_STOP means that wiping shall be immediately stopped without holding the position.
  type: actuator

Vehicle.Body.Windshield.Wiping.System.TargetPosition:
  comment: Default parking position might be used as reference position.
  datatype: float
  description: Requested position of main wiper blade for the wiper system relative to reference position. Location of reference position (0 degrees) and direction of positive/negative degrees is vehicle specific. System behavior when receiving TargetPosition depends on Mode and IsEndingWipeCycle. Supported values are vehicle specific and might be dynamically corrected. If IsEndingWipeCycle=True then wipers will complete current movement before actuating new TargetPosition. If IsEndingWipeCycle=False then wipers will directly change destination if the TargetPosition is changed.
  type: actuator
  unit: degrees

Vehicle.Body.Windshield.Wiping.WiperWear:
  datatype: uint8
  description: Wiper wear as percent. 0 = No Wear. 100 = Worn. Replacement required. Method for calculating or estimating wiper wear is vehicle specific. For windshields with multiple wipers the wear reported shall correspond to the most worn wiper.
  max: 100
  type: sensor
  unit: percent

Vehicle.Cabin:
  description: All in-cabin components, including doors.
  type: branch

Vehicle.Cabin.Convertible:
  description: Convertible roof.
  type: branch

Vehicle.Cabin.Convertible.Status:
  allowed:
  - UNDEFINED
  - CLOSED
  - OPEN
  - CLOSING
  - OPENING
  - STALLED
  datatype: string
  description: Roof status on convertible vehicles.
  type: sensor

Vehicle.Cabin.Door:
  description: All doors, including windows and switches.
  instances:
  - Row[1,2]
  - - DriverSide
    - PassengerSide
  type: branch

Vehicle.Cabin.Door.IsChildLockActive:
  datatype: boolean
  description: Is door child lock active. True = Door cannot be opened from inside. False = Door can be opened from inside.
  type: sensor

Vehicle.Cabin.Door.IsLocked:
  datatype: boolean
  description: Is item locked or unlocked. True = Locked. False = Unlocked.
  type: actuator

Vehicle.Cabin.Door.IsOpen:
  datatype: boolean
  description: Is item open or closed? True = Fully or partially open. False = Fully closed.
  type: actuator

Vehicle.Cabin.Door.Position:
  comment: Relationship between Open/Close and Start/End position is item dependent.
  datatype: uint8
  description: Item position. 0 = Start position 100 = End position.
  max: 100
  min: 0
  type: actuator
  unit: percent

Vehicle.Cabin.Door.Shade:
  description: Side window shade. Open = Retracted, Closed = Deployed. Start position for Shade is Open/Retracted.
  type: branch

Vehicle.Cabin.Door.Shade.IsOpen:
  datatype: boolean
  description: Is item open or closed? True = Fully or partially open. False = Fully closed.
  type: actuator

Vehicle.Cabin.Door.Shade.Position:
  comment: Relationship between Open/Close and Start/End position is item dependent.
  datatype: uint8
  description: Item position. 0 = Start position 100 = End position.
  max: 100
  min: 0
  type: actuator
  unit: percent

Vehicle.Cabin.Door.Shade.Switch:
  allowed:
  - INACTIVE
  - CLOSE
  - OPEN
  - ONE_SHOT_CLOSE
  - ONE_SHOT_OPEN
  datatype: string
  description: Switch controlling sliding action such as window, sunroof, or blind.
  type: actuator

Vehicle.Cabin.Door.Switch:
  allowed:
  - INACTIVE
  - CLOSE
  - OPEN
  - ONE_SHOT_CLOSE
  - ONE_SHOT_OPEN
  datatype: string
  description: Switch controlling sliding action such as window, sunroof, or blind.
  type: actuator

Vehicle.Cabin.Door.Window:
  description: Door window status. Start position for Window is Closed.
  type: branch

Vehicle.Cabin.Door.Window.IsOpen:
  datatype: boolean
  description: Is item open or closed? True = Fully or partially open. False = Fully closed.
  type: actuator

Vehicle.Cabin.Door.Window.Position:
  comment: Relationship between Open/Close and Start/End position is item dependent.
  datatype: uint8
  description: Item position. 0 = Start position 100 = End position.
  max: 100
  min: 0
  type: actuator
  unit: percent

Vehicle.Cabin.Door.Window.Switch:
  allowed:
  - INACTIVE
  - CLOSE
  - OPEN
  - ONE_SHOT_CLOSE
  - ONE_SHOT_OPEN
  datatype: string
  description: Switch controlling sliding action such as window, sunroof, or blind.
  type: actuator

Vehicle.Cabin.DoorCount:
  datatype: uint8
  default: 4
  description: Number of doors in vehicle.
  type: attribute

Vehicle.Cabin.DriverPosition:
  allowed:
  - LEFT
  - MIDDLE
  - RIGHT
  comment: Some signals use DriverSide and PassengerSide as instances. If this signal specifies that DriverPosition is LEFT or MIDDLE, then DriverSide refers to left side and PassengerSide to right side. If this signal specifies that DriverPosition is RIGHT, then DriverSide refers to right side and PassengerSide to left side.
  datatype: string
  description: The position of the driver seat in row 1.
  type: attribute

Vehicle.Cabin.HVAC:
  description: Climate control
  type: branch

Vehicle.Cabin.HVAC.AmbientAirTemperature:
  datatype: float
  description: Ambient air temperature inside the vehicle.
  type: sensor
  unit: celsius

Vehicle.Cabin.HVAC.IsAirConditioningActive:
  datatype: boolean
  description: Is Air conditioning active.
  type: actuator

Vehicle.Cabin.HVAC.IsAutoPowerOptimize:
  datatype: boolean
  description: Auto Power Optimization Flag When set to 'true', the system enables automatic power optimization, dynamically adjusting the power optimization level based on runtime conditions or features managed by the OEM. When set to 'false', manual control of the power optimization level is allowed.
  type: actuator

Vehicle.Cabin.HVAC.IsFrontDefrosterActive:
  datatype: boolean
  description: Is front defroster active.
  type: actuator

Vehicle.Cabin.HVAC.IsRearDefrosterActive:
  datatype: boolean
  description: Is rear defroster active.
  type: actuator

Vehicle.Cabin.HVAC.IsRecirculationActive:
  datatype: boolean
  description: Is recirculation active.
  type: actuator

Vehicle.Cabin.HVAC.PowerOptimizeLevel:
  datatype: uint8
  description: Power optimization level for this branch/subsystem. A higher number indicates more aggressive power optimization. Level 0 indicates that all functionality is enabled, no power optimization enabled. Level 10 indicates most aggressive power optimization mode, only essential functionality enabled.
  max: 10
  min: 0
  type: actuator

Vehicle.Cabin.HVAC.Station:
  description: HVAC for single station in the vehicle
  instances:
  - Row[1,4]
  - - Driver
    - Passenger
  type: branch

Vehicle.Cabin.HVAC.Station.AirDistribution:
  allowed:
  - UP
  - MIDDLE
  - DOWN
  datatype: string
  description: Direction of airstream
  type: actuator

Vehicle.Cabin.HVAC.Station.FanSpeed:
  datatype: uint8
  description: Fan Speed, 0 = off. 100 = max
  max: 100
  min: 0
  type: actuator
  unit: percent

Vehicle.Cabin.HVAC.Station.Temperature:
  datatype: float
  description: Temperature
  type: actuator
  unit: celsius

Vehicle.Cabin.Infotainment:
  description: Infotainment system.
  type: branch

Vehicle.Cabin.Infotainment.HMI:
  description: HMI related signals
  type: branch

Vehicle.Cabin.Infotainment.HMI.Brightness:
  comment: The value 0 does not necessarily correspond to a turned off HMI, as it may not be allowed/supported to turn off the HMI completely.
  datatype: float
  description: Brightness of the HMI, relative to supported range. 0 = Lowest brightness possible. 100 = Maximum Brightness possible.
  max: 100
  min: 0
  type: actuator
  unit: percent

Vehicle.Cabin.Infotainment.HMI.CurrentLanguage:
  datatype: string
  description: ISO 639-1 standard language code for the current HMI
  type: sensor

Vehicle.Cabin.Infotainment.HMI.DateFormat:
  allowed:
  - YYYY_MM_DD
  - DD_MM_YYYY
  - MM_DD_YYYY
  - YY_MM_DD
  - DD_MM_YY
  - MM_DD_YY
  datatype: string
  description: Date format used in the current HMI
  type: actuator

Vehicle.Cabin.Infotainment.HMI.DayNightMode:
  allowed:
  - DAY
  - NIGHT
  datatype: string
  description: Current display theme
  type: actuator

Vehicle.Cabin.Infotainment.HMI.DisplayOffDuration:
  comment: Display shall be turned off at HMI.LastActionTime + HMI.DisplayOffDuration, unless HMI.IsScreenAlwaysOn==True.
  datatype: uint16
  description: Duration in seconds before the display is turned off. Value shall be 0 if screen never shall turn off.
  type: actuator
  unit: s

Vehicle.Cabin.Infotainment.HMI.DistanceUnit:
  allowed:
  - MILES
  - KILOMETERS
  datatype: string
  description: Distance unit used in the current HMI
  type: actuator

Vehicle.Cabin.Infotainment.HMI.EVEconomyUnits:
  allowed:
  - MILES_PER_KILOWATT_HOUR
  - KILOMETERS_PER_KILOWATT_HOUR
  - KILOWATT_HOURS_PER_100_MILES
  - KILOWATT_HOURS_PER_100_KILOMETERS
  - WATT_HOURS_PER_MILE
  - WATT_HOURS_PER_KILOMETER
  datatype: string
  description: EV fuel economy unit used in the current HMI
  type: actuator

Vehicle.Cabin.Infotainment.HMI.EVEnergyUnits:
  allowed:
  - WATT_HOURS
  - AMPERE_HOURS
  - KILOWATT_HOURS
  comment: Ampere hours is by definition not an energy unit, but can be used as a measurement of energy if the voltage, like nominal voltage of the battery, is known.
  datatype: string
  description: EV energy unit used in the current HMI
  type: actuator

Vehicle.Cabin.Infotainment.HMI.FontSize:
  allowed:
  - STANDARD
  - LARGE
  - EXTRA_LARGE
  datatype: string
  description: Font size used in the current HMI
  type: actuator

Vehicle.Cabin.Infotainment.HMI.FuelEconomyUnits:
  allowed:
  - MPG_UK
  - MPG_US
  - MILES_PER_LITER
  - KILOMETERS_PER_LITER
  - LITERS_PER_100_KILOMETERS
  datatype: string
  description: Fuel economy unit used in the current HMI
  type: actuator

Vehicle.Cabin.Infotainment.HMI.FuelVolumeUnit:
  allowed:
  - LITER
  - GALLON_US
  - GALLON_UK
  datatype: string
  description: Fuel volume unit used in the current HMI
  type: actuator

Vehicle.Cabin.Infotainment.HMI.IsScreenAlwaysOn:
  datatype: boolean
  description: Used to prevent the screen going black if no action placed.
  type: actuator

Vehicle.Cabin.Infotainment.HMI.LastActionTime:
  datatype: string
  description: Time for last hmi action, formatted according to ISO 8601 with UTC time zone.
  type: sensor
  unit: iso8601

Vehicle.Cabin.Infotainment.HMI.SpeedUnit:
  allowed:
  - METERS_PER_SECOND
  - MILES_PER_HOUR
  - KILOMETERS_PER_HOUR
  datatype: string
  description: Speed unit used in the current HMI
  type: actuator

Vehicle.Cabin.Infotainment.HMI.TemperatureUnit:
  allowed:
  - C
  - F
  datatype: string
  description: Temperature unit used in the current HMI
  type: actuator

Vehicle.Cabin.Infotainment.HMI.TimeFormat:
  allowed:
  - HR_12
  - HR_24
  datatype: string
  description: Time format used in the current HMI
  type: actuator

Vehicle.Cabin.Infotainment.HMI.TirePressureUnit:
  allowed:
  - PSI
  - KPA
  - BAR
  datatype: string
  description: Tire pressure unit used in the current HMI
  type: actuator

Vehicle.Cabin.Infotainment.IsAutoPowerOptimize:
  datatype: boolean
  description: Auto Power Optimization Flag When set to 'true', the system enables automatic power optimization, dynamically adjusting the power optimization level based on runtime conditions or features managed by the OEM. When set to 'false', manual control of the power optimization level is allowed.
  type: actuator

Vehicle.Cabin.Infotainment.Media:
  description: All Media actions
  type: branch

Vehicle.Cabin.Infotainment.Media.Action:
  allowed:
  - UNKNOWN
  - STOP
  - PLAY
  - FAST_FORWARD
  - FAST_BACKWARD
  - SKIP_FORWARD
  - SKIP_BACKWARD
  datatype: string
  description: Tells if the media was
  type: actuator

Vehicle.Cabin.Infotainment.Media.DeclinedURI:
  datatype: string
  description: URI of suggested media that was declined
  type: sensor

Vehicle.Cabin.Infotainment.Media.Played:
  description: Collection of signals updated in concert when a new media is played
  type: branch

Vehicle.Cabin.Infotainment.Media.Played.Album:
  datatype: string
  description: Name of album being played
  type: sensor

Vehicle.Cabin.Infotainment.Media.Played.Artist:
  datatype: string
  description: Name of artist being played
  type: sensor

Vehicle.Cabin.Infotainment.Media.Played.Genre:
  datatype: string
  description: Name of genre being played
  type: sensor

Vehicle.Cabin.Infotainment.Media.Played.PlaybackRate:
  comment: The normal playback rate is multiplied by this value to obtain the current rate, so a value of 1.0 indicates normal speed. Values of lower than 1.0 make the media play slower than normal. Values of higher than 1.0 make the media play faster than normal.
  datatype: float
  description: Current playback rate of media being played.
  type: actuator

Vehicle.Cabin.Infotainment.Media.Played.Source:
  allowed:
  - UNKNOWN
  - SIRIUS_XM
  - AM
  - FM
  - DAB
  - TV
  - CD
  - DVD
  - AUX
  - USB
  - DISK
  - BLUETOOTH
  - INTERNET
  - VOICE
  - BEEP
  datatype: string
  description: Media selected for playback
  type: actuator

Vehicle.Cabin.Infotainment.Media.Played.Track:
  datatype: string
  description: Name of track being played
  type: sensor

Vehicle.Cabin.Infotainment.Media.Played.URI:
  datatype: string
  description: User Resource associated with the media
  type: sensor

Vehicle.Cabin.Infotainment.Media.SelectedURI:
  datatype: string
  description: URI of suggested media that was selected
  type: actuator

Vehicle.Cabin.Infotainment.Media.Volume:
  datatype: uint8
  description: Current Media Volume
  max: 100
  min: 0
  type: actuator
  unit: percent

Vehicle.Cabin.Infotainment.Navigation:
  description: All navigation actions
  type: branch

Vehicle.Cabin.Infotainment.Navigation.DestinationSet:
  description: A navigation has been selected.
  type: branch

Vehicle.Cabin.Infotainment.Navigation.DestinationSet.Latitude:
  datatype: double
  description: Latitude of destination in WGS 84 geodetic coordinates.
  max: 90
  min: -90
  type: actuator
  unit: degrees

Vehicle.Cabin.Infotainment.Navigation.DestinationSet.Longitude:
  datatype: double
  description: Longitude of destination in WGS 84 geodetic coordinates.
  max: 180
  min: -180
  type: actuator
  unit: degrees

Vehicle.Cabin.Infotainment.Navigation.GuidanceVoice:
  allowed:
  - STANDARD_MALE
  - STANDARD_FEMALE
  - ETC
  comment: ETC indicates a voice alternative not covered by the explicitly listed alternatives.
  datatype: string
  description: Navigation guidance state that was selected.
  type: actuator

Vehicle.Cabin.Infotainment.Navigation.Map:
  description: All map actions
  type: branch

Vehicle.Cabin.Infotainment.Navigation.Map.IsAutoScaleModeUsed:
  comment: If true, then auto-scaling mode is used. If false, then manual-scaling mode is used.
  datatype: boolean
  description: Used to select auto-scaling mode. This feature dynamically adjusts the zoom level of the map to provide an optimal view based on the current speed of the vehicle
  type: actuator

Vehicle.Cabin.Infotainment.Navigation.Mute:
  allowed:
  - MUTED
  - ALERT_ONLY
  - UNMUTED
  datatype: string
  description: Navigation mute state that was selected.
  type: actuator

Vehicle.Cabin.Infotainment.Navigation.Volume:
  datatype: uint8
  description: Current navigation volume
  max: 100
  min: 0
  type: actuator
  unit: percent

Vehicle.Cabin.Infotainment.PowerOptimizeLevel:
  datatype: uint8
  description: Power optimization level for this branch/subsystem. A higher number indicates more aggressive power optimization. Level 0 indicates that all functionality is enabled, no power optimization enabled. Level 10 indicates most aggressive power optimization mode, only essential functionality enabled.
  max: 10
  min: 0
  type: actuator

Vehicle.Cabin.Infotainment.SmartphoneProjection:
  comment: Smartphone projection exposes or controls specific applications on the Smartphone on the vehicle infotainment system.
  description: All smartphone projection actions.
  type: branch

Vehicle.Cabin.Infotainment.SmartphoneProjection.Active:
  allowed:
  - NONE
  - ACTIVE
  - INACTIVE
  comment: NONE indicates that projection is not supported.
  datatype: string
  description: Projection activation info.
  type: actuator

Vehicle.Cabin.Infotainment.SmartphoneProjection.Source:
  allowed:
  - USB
  - BLUETOOTH
  - WIFI
  comment: Smartphone projection exposes or controls specific applications on the Smartphone on the vehicle infotainment system.
  datatype: string
  description: Connectivity source selected for projection.
  type: actuator

Vehicle.Cabin.Infotainment.SmartphoneProjection.SupportedMode:
  allowed:
  - ANDROID_AUTO
  - APPLE_CARPLAY
  - MIRROR_LINK
  - OTHER
  datatype: string[]
  description: Supportable list for projection.
  type: attribute

Vehicle.Cabin.Infotainment.SmartphoneScreenMirroring:
  comment: Smartphone screen mirroring mirrors the whole screen of the Smartphone on the vehicle infotainment system.
  description: All smartphone screen mirroring actions.
  type: branch

Vehicle.Cabin.Infotainment.SmartphoneScreenMirroring.Active:
  allowed:
  - NONE
  - ACTIVE
  - INACTIVE
  comment: NONE indicates that mirroring is not supported.
  datatype: string
  description: Mirroring activation info.
  type: actuator

Vehicle.Cabin.Infotainment.SmartphoneScreenMirroring.Source:
  allowed:
  - USB
  - BLUETOOTH
  - WIFI
  datatype: string
  description: Connectivity source selected for mirroring.
  type: actuator

Vehicle.Cabin.IsAutoPowerOptimize:
  datatype: boolean
  description: Auto Power Optimization Flag When set to 'true', the system enables automatic power optimization, dynamically adjusting the power optimization level based on runtime conditions or features managed by the OEM. When set to 'false', manual control of the power optimization level is allowed.
  type: actuator

Vehicle.Cabin.IsWindowChildLockEngaged:
  comment: Window child lock refers to the functionality to disable the move window button next to most windows, so that they only can be operated by the driver.
  datatype: boolean
  description: Is window child lock engaged. True = Engaged. False = Disengaged.
  type: actuator

Vehicle.Cabin.Light:
  comment: V4.0 branch renamed from "Lights" to "Light" to comply with singular naming of entities. Use SingleConfigurableLight.vspec to describe interior lights that can be configured.
  description: Light that is part of the Cabin.
  type: branch

Vehicle.Cabin.Light.AmbientLight:
  description: Decorative coloured light inside the cabin, usually mounted on the door, ceiling, etc.
  instances:
  - Row[1,2]
  - - DriverSide
    - PassengerSide
  type: branch

Vehicle.Cabin.Light.AmbientLight.Color:
  comment: For example; "#C0C0C0" = Silver, "#FFD700" = Gold, "#000000" = Black, "#FFFFFF" = White, etc.
  datatype: string
  description: Hexadecimal color code represented as a 3-byte RGB (i.e. Red, Green, and Blue) value preceded by a hash symbol "#". Allowed range "#000000" to "#FFFFFF".
  type: actuator

Vehicle.Cabin.Light.AmbientLight.Intensity:
  comment: Minimum value cannot be zero as on/off is controlled by the actuator IsLightOn. V4.0 moved from Cabin.Lights.AmbientLight.Intensity to enable individual control of lights via the SingleConfigurableLight.vspec.
  datatype: uint8
  description: How much of the maximum possible brightness of the light is used. 1 = Maximum attenuation, 100 = No attenuation (i.e. full brightness).
  max: 100
  min: 1
  type: actuator
  unit: percent

Vehicle.Cabin.Light.AmbientLight.IsLightOn:
  datatype: boolean
  description: Indicates whether the light is turned on. True = On, False = Off.
  type: actuator

Vehicle.Cabin.Light.InteractiveLightBar:
  description: Decorative coloured light bar that supports effects, usually mounted on the dashboard (e.g. BMW i7 Interactive bar).
  type: branch

Vehicle.Cabin.Light.InteractiveLightBar.Color:
  comment: For example; "#C0C0C0" = Silver, "#FFD700" = Gold, "#000000" = Black, "#FFFFFF" = White, etc.
  datatype: string
  description: Hexadecimal color code represented as a 3-byte RGB (i.e. Red, Green, and Blue) value preceded by a hash symbol "#". Allowed range "#000000" to "#FFFFFF".
  type: actuator

Vehicle.Cabin.Light.InteractiveLightBar.Effect:
  comment: Default and allowed values are OEM-specific and should be defined accordingly (e.g. with the use of overlays).
  datatype: string
  description: Light effect selection from a predefined set of allowed values.
  type: actuator

Vehicle.Cabin.Light.InteractiveLightBar.Intensity:
  comment: Minimum value cannot be zero as on/off is controlled by the actuator IsLightOn. V4.0 moved from Cabin.Lights.AmbientLight.Intensity to enable individual control of lights via the SingleConfigurableLight.vspec.
  datatype: uint8
  description: How much of the maximum possible brightness of the light is used. 1 = Maximum attenuation, 100 = No attenuation (i.e. full brightness).
  max: 100
  min: 1
  type: actuator
  unit: percent

Vehicle.Cabin.Light.InteractiveLightBar.IsLightOn:
  datatype: boolean
  description: Indicates whether the light is turned on. True = On, False = Off.
  type: actuator

Vehicle.Cabin.Light.IsDomeOn:
  datatype: boolean
  description: Is central dome light on
  type: actuator

Vehicle.Cabin.Light.IsGloveBoxOn:
  datatype: boolean
  description: Is glove box light on
  type: actuator

Vehicle.Cabin.Light.PerceivedAmbientLight:
  comment: V4.0 named changed from "AmbientLight" to "PerceivedAmbientLight". This is a read-only property that refers to the pre-existing light (e.g., natural light). If you are looking for the in-cabin decorative lights that sometimes are also called "AmbientLights", please refer to the branch Vehicle.Cabin.Light.AmbientLight.
  datatype: uint8
  description: The percentage of ambient light that is measured (e.g., by a sensor) inside the cabin. 0 = No ambient light. 100 = Full brightness.
  max: 100
  min: 0
  type: sensor
  unit: percent

Vehicle.Cabin.Light.Spotlight:
  description: Spotlight for a specific area in the vehicle.
  instances:
  - Row[1,4]
  - - DriverSide
    - PassengerSide
  type: branch

Vehicle.Cabin.Light.Spotlight.Color:
  comment: For example; "#C0C0C0" = Silver, "#FFD700" = Gold, "#000000" = Black, "#FFFFFF" = White, etc.
  datatype: string
  description: Hexadecimal color code represented as a 3-byte RGB (i.e. Red, Green, and Blue) value preceded by a hash symbol "#". Allowed range "#000000" to "#FFFFFF".
  type: actuator

Vehicle.Cabin.Light.Spotlight.Intensity:
  comment: Minimum value cannot be zero as on/off is controlled by the actuator IsLightOn. V4.0 moved from Cabin.Lights.AmbientLight.Intensity to enable individual control of lights via the SingleConfigurableLight.vspec.
  datatype: uint8
  description: How much of the maximum possible brightness of the light is used. 1 = Maximum attenuation, 100 = No attenuation (i.e. full brightness).
  max: 100
  min: 1
  type: actuator
  unit: percent

Vehicle.Cabin.Light.Spotlight.IsLightOn:
  datatype: boolean
  description: Indicates whether the light is turned on. True = On, False = Off.
  type: actuator

Vehicle.Cabin.PowerOptimizeLevel:
  datatype: uint8
  description: Power optimization level for this branch/subsystem. A higher number indicates more aggressive power optimization. Level 0 indicates that all functionality is enabled, no power optimization enabled. Level 10 indicates most aggressive power optimization mode, only essential functionality enabled.
  max: 10
  min: 0
  type: actuator

Vehicle.Cabin.RearShade:
  description: Rear window shade. Open = Retracted, Closed = Deployed. Start position for RearShade is Open/Retracted.
  type: branch

Vehicle.Cabin.RearShade.IsOpen:
  datatype: boolean
  description: Is item open or closed? True = Fully or partially open. False = Fully closed.
  type: actuator

Vehicle.Cabin.RearShade.Position:
  comment: Relationship between Open/Close and Start/End position is item dependent.
  datatype: uint8
  description: Item position. 0 = Start position 100 = End position.
  max: 100
  min: 0
  type: actuator
  unit: percent

Vehicle.Cabin.RearShade.Switch:
  allowed:
  - INACTIVE
  - CLOSE
  - OPEN
  - ONE_SHOT_CLOSE
  - ONE_SHOT_OPEN
  datatype: string
  description: Switch controlling sliding action such as window, sunroof, or blind.
  type: actuator

Vehicle.Cabin.RearviewMirror:
  description: Rear-view mirror.
  type: branch

Vehicle.Cabin.RearviewMirror.DimmingLevel:
  datatype: uint8
  description: Dimming level of rear-view mirror. 0 = Undimmed. 100 = Fully dimmed.
  max: 100
  type: actuator
  unit: percent

Vehicle.Cabin.Seat:
  description: All seats.
  instances:
  - Row[1,2]
  - - DriverSide
    - Middle
    - PassengerSide
  type: branch

Vehicle.Cabin.Seat.Airbag:
  description: Airbag signals.
  type: branch

Vehicle.Cabin.Seat.Airbag.IsDeployed:
  datatype: boolean
  description: Airbag deployment status. True = Airbag deployed. False = Airbag not deployed.
  type: sensor

Vehicle.Cabin.Seat.Airbag.IsEnabled:
  datatype: boolean
  description: Airbag enabled status. True = Airbag enabled. False = Airbag not enabled.
  type: sensor

Vehicle.Cabin.Seat.Backrest:
  description: Describes signals related to the backrest of the seat.
  type: branch

Vehicle.Cabin.Seat.Backrest.BottomLumbarSupport:
  datatype: float
  description: Bottom lumbar bsupport (in/out position). 0 = Innermost position. 100 = Outermost position.
  max: 100
  min: 0
  type: actuator
  unit: percent

Vehicle.Cabin.Seat.Backrest.HeatingCooling:
  datatype: int8
  description: Heating or Cooling requsted for the Item. -100 = Maximum cooling, 0 = Heating/cooling deactivated, 100 = Maximum heating.
  max: 100
  min: -100
  type: actuator
  unit: percent

Vehicle.Cabin.Seat.Backrest.IsLessLumbarSupportSwitchEngaged:
  comment: Affects the property (SingleSeat.Backrest.LumbarSupport).
  datatype: boolean
  description: Is switch for less lumbar support engaged.
  type: actuator

Vehicle.Cabin.Seat.Backrest.IsLessSideBolsterSupportSwitchEngaged:
  comment: Affects the property (SingleSeat.Backrest.SideBolsterSupport).
  datatype: boolean
  description: Is switch for less side bolster support engaged.
  type: actuator

Vehicle.Cabin.Seat.Backrest.IsLumbarDownSwitchEngaged:
  comment: Affects the property (SingleSeat.Backrest.LumbarSupport).
  datatype: boolean
  description: Lumbar down switch engaged.
  type: actuator

Vehicle.Cabin.Seat.Backrest.IsLumbarUpSwitchEngaged:
  comment: Affects the property (SingleSeat.Backrest.LumbarSupport).
  datatype: boolean
  description: Lumbar up switch engaged.
  type: actuator

Vehicle.Cabin.Seat.Backrest.IsMoreLumbarSupportSwitchEngaged:
  comment: Affects the property (SingleSeat.Backrest.LumbarSupport).
  datatype: boolean
  description: Is switch for more lumbar support engaged.
  type: actuator

Vehicle.Cabin.Seat.Backrest.IsMoreSideBolsterSupportSwitchEngaged:
  comment: Affects the property (SingleSeat.Backrest.SideBolsterSupport).
  datatype: boolean
  description: Is switch for more side bolster support engaged.
  type: actuator

Vehicle.Cabin.Seat.Backrest.IsReclineBackwardSwitchEngaged:
  comment: Affects the property (SingleSeat.Backrest.Recline).
  datatype: boolean
  description: Backrest recline backward switch engaged.
  type: actuator

Vehicle.Cabin.Seat.Backrest.IsReclineForwardSwitchEngaged:
  comment: Affects the property (SingleSeat.Backrest.Recline).
  datatype: boolean
  description: Backrest recline forward switch engaged.
  type: actuator

Vehicle.Cabin.Seat.Backrest.Lumbar:
  deprecation: v5.0 - nested properties moved to Seat.Backrest.<Property>.
  description: Adjustable lumbar support mechanisms in seats allow the user to change the seat back shape.
  type: branch

Vehicle.Cabin.Seat.Backrest.Lumbar.Height:
  datatype: uint8
  deprecation: v5.0 - refactored to Seat.Backrest.LumbarHeight
  description: Height of lumbar support. Position is relative within available movable range of the lumbar support. 0 = Lowermost position supported.
  min: 0
  type: actuator
  unit: mm

Vehicle.Cabin.Seat.Backrest.Lumbar.Support:
  datatype: float
  deprecation: v5.0 - refactored to Seat.Backrest.LumbarSupport
  description: Lumbar support (in/out position). 0 = Innermost position. 100 = Outermost position.
  max: 100
  min: 0
  type: actuator
  unit: percent

Vehicle.Cabin.Seat.Backrest.LumbarHeight:
  datatype: uint8
  description: Height of lumbar support. Position is relative within available movable range of the lumbar support. 0 = Lowermost position supported.
  min: 0
  type: actuator
  unit: mm

Vehicle.Cabin.Seat.Backrest.LumbarSupport:
  comment: A vehicle should typically either use this generic lumbar signal or the more specified top/mid/bottom signals.
  datatype: float
  description: Lumbar support (in/out position). 0 = Innermost position. 100 = Outermost position.
  max: 100
  min: 0
  type: actuator
  unit: percent

Vehicle.Cabin.Seat.Backrest.MidLumbarSupport:
  datatype: float
  description: Mid lumbar support (in/out position). 0 = Innermost position. 100 = Outermost position.
  max: 100
  min: 0
  type: actuator
  unit: percent

Vehicle.Cabin.Seat.Backrest.Recline:
  comment: Seat z-axis depends on seat tilt. This means that movement of backrest due to seat tilting will not affect Backrest.Recline as long as the angle between Seating and Backrest are constant. Absolute recline relative to vehicle z-axis can be calculated as Tilt + Backrest.Recline.
  datatype: float
  description: Backrest recline compared to seat z-axis (seat vertical axis). 0 degrees = Upright/Vertical backrest. Negative degrees for forward recline. Positive degrees for backward recline.
  type: actuator
  unit: degrees

Vehicle.Cabin.Seat.Backrest.SideBolster:
  deprecation: v5.0 - nested properties moved to Seat.Backrest.<Property>.
  description: Backrest side bolster (lumbar side support) settings.
  type: branch

Vehicle.Cabin.Seat.Backrest.SideBolster.Support:
  datatype: float
  deprecation: v5.0 - refactored to Seat.Backrest.SideBolsterSupport
  description: Side bolster support. 0 = Minimum support (widest side bolster setting). 100 = Maximum support.
  max: 100
  min: 0
  type: actuator
  unit: percent

Vehicle.Cabin.Seat.Backrest.SideBolsterSupport:
  datatype: float
  description: Side bolster support. 0 = Minimum support (widest side bolster setting). 100 = Maximum support.
  max: 100
  min: 0
  type: actuator
  unit: percent

Vehicle.Cabin.Seat.Backrest.SideBolsterSupportLeft:
  datatype: float
  description: Side bolster support left. 0 = Minimum support (widest side bolster setting). 100 = Maximum support.
  max: 100
  min: 0
  type: actuator
  unit: percent

Vehicle.Cabin.Seat.Backrest.SideBolsterSupportRight:
  datatype: float
  description: Side bolster support right. 0 = Minimum support (widest side bolster setting). 100 = Maximum support.
  max: 100
  min: 0
  type: actuator
  unit: percent

Vehicle.Cabin.Seat.Backrest.TopLumbarSupport:
  datatype: float
  description: Top lumbar support (in/out position). 0 = Innermost position. 100 = Outermost position.
  max: 100
  min: 0
  type: actuator
  unit: percent

Vehicle.Cabin.Seat.Backrest.UpperShoulderSupport:
  datatype: float
  description: Upper shoulder support. 0 = Minimum support (widest side bolster setting). 100 = Maximum support.
  max: 100
  min: 0
  type: actuator
  unit: percent

Vehicle.Cabin.Seat.Headrest:
  description: Headrest settings.
  type: branch

Vehicle.Cabin.Seat.Headrest.Angle:
  datatype: float
  description: Headrest angle, relative to backrest, 0 degrees if parallel to backrest, Positive degrees = tilted forward.
  type: actuator
  unit: degrees

Vehicle.Cabin.Seat.Headrest.Height:
  datatype: uint8
  description: Position of headrest relative to movable range of the head rest. 0 = Bottommost position supported.
  min: 0
  type: actuator
  unit: mm

Vehicle.Cabin.Seat.Headrest.IsBackwardSwitchEngaged:
  comment: Affects the property (SingleSeat.Headrest.Angle).
  datatype: boolean
  description: Head rest backward switch engaged.
  type: actuator

Vehicle.Cabin.Seat.Headrest.IsDownSwitchEngaged:
  comment: Affects the property (SingleSeat.Headrest.Height).
  datatype: boolean
  description: Head rest down switch engaged.
  type: actuator

Vehicle.Cabin.Seat.Headrest.IsForwardSwitchEngaged:
  comment: Affects the property (SingleSeat.Headrest.Angle).
  datatype: boolean
  description: Head rest forward switch engaged.
  type: actuator

Vehicle.Cabin.Seat.Headrest.IsUpSwitchEngaged:
  comment: Affects the property (SingleSeat.Headrest.Height).
  datatype: boolean
  description: Head rest up switch engaged.
  type: actuator

Vehicle.Cabin.Seat.HeatingCooling:
  datatype: int8
  description: Heating or Cooling requsted for the Item. -100 = Maximum cooling, 0 = Heating/cooling deactivated, 100 = Maximum heating.
  max: 100
  min: -100
  type: actuator
  unit: percent

Vehicle.Cabin.Seat.Height:
  datatype: uint16
  description: Seat position on vehicle z-axis. Position is relative within available movable range of the seating. 0 = Lowermost position supported.
  min: 0
  type: actuator
  unit: mm

Vehicle.Cabin.Seat.IsBackwardSwitchEngaged:
  comment: Affects the property (SingleSeat.Position).
  datatype: boolean
  description: Seat backward switch engaged.
  type: actuator

Vehicle.Cabin.Seat.IsBelted:
  datatype: boolean
  description: Is the belt engaged.
  type: sensor

Vehicle.Cabin.Seat.IsCoolerSwitchEngaged:
  comment: Affects the property (SingleSeat.Heating).
  datatype: boolean
  description: Cooler switch for Seat heater.
  type: actuator

Vehicle.Cabin.Seat.IsDecreaseMassageLevelSwitchEngaged:
  comment: Affects the property (SingleSeat.MassageLevel).
  datatype: boolean
  description: Decrease massage level switch engaged.
  type: actuator

Vehicle.Cabin.Seat.IsDownSwitchEngaged:
  comment: Affects the property (SingleSeat.Height).
  datatype: boolean
  description: Seat down switch engaged.
  type: actuator

Vehicle.Cabin.Seat.IsForwardSwitchEngaged:
  comment: Affects the property (SingleSeat.Position).
  datatype: boolean
  description: Seat forward switch engaged.
  type: actuator

Vehicle.Cabin.Seat.IsIncreaseMassageLevelSwitchEngaged:
  comment: Affects the property (SingleSeat.MassageLevel).
  datatype: boolean
  description: Increase massage level switch engaged.
  type: actuator

Vehicle.Cabin.Seat.IsTiltBackwardSwitchEngaged:
  comment: Affects the property (SingleSeat.Tilt).
  datatype: boolean
  description: Tilt backward switch engaged.
  type: actuator

Vehicle.Cabin.Seat.IsTiltForwardSwitchEngaged:
  comment: Affects the property (SingleSeat.Tilt).
  datatype: boolean
  description: Tilt forward switch engaged.
  type: actuator

Vehicle.Cabin.Seat.IsUpSwitchEngaged:
  comment: Affects the property (SingleSeat.Height).
  datatype: boolean
  description: Seat up switch engaged.
  type: actuator

Vehicle.Cabin.Seat.IsWarmerSwitchEngaged:
  comment: Affects the property (SingleSeat.Heating).
  datatype: boolean
  description: Warmer switch for Seat heater.
  type: actuator

Vehicle.Cabin.Seat.Massage:
  description: Massage related information for the seat.
  type: branch

Vehicle.Cabin.Seat.Massage.IsAvailable:
  datatype: boolean
  description: True if the seat have the massage capability
  type: attribute

Vehicle.Cabin.Seat.Massage.Level:
  datatype: uint8
  description: Seat massage level. 0 = off. 100 = max massage.
  max: 100
  min: 0
  type: actuator
  unit: percent

Vehicle.Cabin.Seat.Massage.Status:
  allowed:
  - 'ON'
  - 'OFF'
  datatype: string
  description: Massage status.
  type: sensor

Vehicle.Cabin.Seat.Massage.SupportedTypes:
  comment: OEMs may define a list of identifiers for supported massage types using the allowed keyword
  datatype: string[]
  description: Type of massage.
  type: attribute

Vehicle.Cabin.Seat.Massage.TypeActive:
  comment: OEMs may define a list of identifiers for supported massage types using the allowed keyword
  datatype: string
  description: Type of massage active.
  type: actuator

Vehicle.Cabin.Seat.NeckScarf:
  description: NeckScarf settings.
  type: branch

Vehicle.Cabin.Seat.NeckScarf.FanSpeed:
  datatype: uint8
  description: Speed of the fan.
  max: 100
  min: 0
  type: actuator
  unit: percent

Vehicle.Cabin.Seat.NeckScarf.HeatingCooling:
  datatype: int8
  description: Heating or Cooling requsted for the Item. -100 = Maximum cooling, 0 = Heating/cooling deactivated, 100 = Maximum heating.
  max: 100
  min: -100
  type: actuator
  unit: percent

Vehicle.Cabin.Seat.OccupancyStatus:
  allowed:
  - UNKNOWN
  - OCCUPIED
  - EMPTY
  datatype: string
  description: Occupancy status of the seat.
  type: sensor

Vehicle.Cabin.Seat.Occupant:
  deprecation: v5.0 - use data from Vehicle.Occupant.
  description: Occupant data.
  type: branch

Vehicle.Cabin.Seat.Occupant.Identifier:
  deprecation: v5.0 - use data from Vehicle.Occupant.*.*.Identifier.
  description: Identifier attributes based on OAuth 2.0.
  type: branch

Vehicle.Cabin.Seat.Occupant.Identifier.Issuer:
  datatype: string
  deprecation: v5.0 - use data from Vehicle.Occupant.*.*.Identifier.
  description: Unique Issuer for the authentication of the occupant e.g. https://accounts.funcorp.com.
  type: sensor

Vehicle.Cabin.Seat.Occupant.Identifier.Subject:
  datatype: string
  deprecation: v5.0 - use data from Vehicle.Occupant.*.*.Identifier.
  description: Subject for the authentication of the occupant e.g. UserID 7331677.
  type: sensor

Vehicle.Cabin.Seat.Position:
  datatype: uint16
  description: Seat position on vehicle x-axis. Position is relative to the frontmost position supported by the seat. 0 = Frontmost position supported.
  min: 0
  type: actuator
  unit: mm

Vehicle.Cabin.Seat.SeatBeltHeight:
  datatype: uint16
  description: Seat belt position on vehicle z-axis. Position is relative within available movable range of the seat belt. 0 = Lowermost position supported.
  type: actuator
  unit: mm

Vehicle.Cabin.Seat.Seating:
  comment: Seating is here considered as the part of the seat that supports the thighs. Additional cushions (if any) for support of lower legs is not covered by this branch.
  description: Describes signals related to the seat bottom of the seat.
  type: branch

Vehicle.Cabin.Seat.Seating.HeatingCooling:
  datatype: int8
  description: Heating or Cooling requsted for the Item. -100 = Maximum cooling, 0 = Heating/cooling deactivated, 100 = Maximum heating.
  max: 100
  min: -100
  type: actuator
  unit: percent

Vehicle.Cabin.Seat.Seating.IsBackwardSwitchEngaged:
  comment: Affects the property (SingleSeat.Seating.Length).
  datatype: boolean
  description: Is switch to decrease seating length engaged.
  type: actuator

Vehicle.Cabin.Seat.Seating.IsForwardSwitchEngaged:
  datatype: boolean
  description: Is switch to increase seating length engaged.
  type: actuator

Vehicle.Cabin.Seat.Seating.Length:
  datatype: uint16
  description: Length adjustment of seating. 0 = Adjustable part of seating in rearmost position (Shortest length of seating).
  min: 0
  type: actuator
  unit: mm

Vehicle.Cabin.Seat.Seating.SideBolsterSupportLeft:
  datatype: float
  description: Seat bottom side bolster support left. 0 = Minimum support (widest side bolster setting). 100 = Maximum support.
  max: 100
  min: 0
  type: actuator
  unit: percent

Vehicle.Cabin.Seat.Seating.SideBolsterSupportRight:
  datatype: float
  description: Seat bottom side bolster support right. 0 = Minimum support (widest side bolster setting). 100 = Maximum support.
  max: 100
  min: 0
  type: actuator
  unit: percent

Vehicle.Cabin.Seat.Switch:
  deprecation: v5.0 - nested properties moved to Seat.<Property>.
  description: Seat switch signals
  type: branch

Vehicle.Cabin.Seat.Switch.Backrest:
  deprecation: v5.0 - nested properties refactored to Seat.Backrest.<Property>
  description: Describes switches related to the backrest of the seat.
  type: branch

Vehicle.Cabin.Seat.Switch.Backrest.IsReclineBackwardEngaged:
  datatype: boolean
  deprecation: v5.0 - refactored to Seat.Backrest.IsReclineBackwardSwitchEngaged
  description: Backrest recline backward switch engaged (SingleSeat.Backrest.Recline).
  type: actuator

Vehicle.Cabin.Seat.Switch.Backrest.IsReclineForwardEngaged:
  datatype: boolean
  deprecation: v5.0 - refactored to Seat.Backrest.IsReclineForwardSwitchEngaged
  description: Backrest recline forward switch engaged (SingleSeat.Backrest.Recline).
  type: actuator

Vehicle.Cabin.Seat.Switch.Backrest.Lumbar:
  deprecation: v5.0 - nested properties refactored to Seat.Backrest.<Property>
  description: Switches for SingleSeat.Backrest.Lumbar.
  type: branch

Vehicle.Cabin.Seat.Switch.Backrest.Lumbar.IsDownEngaged:
  datatype: boolean
  deprecation: v5.0 - refactored to Seat.Backrest.IsLumbarDownSwitchEngaged
  description: Lumbar down switch engaged (SingleSeat.Backrest.Lumbar.Support).
  type: actuator

Vehicle.Cabin.Seat.Switch.Backrest.Lumbar.IsLessSupportEngaged:
  datatype: boolean
  deprecation: v5.0 - refactored to Seat.Backrest.IsLessLumbarSupportSwitchEngaged
  description: Is switch for less lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).
  type: actuator

Vehicle.Cabin.Seat.Switch.Backrest.Lumbar.IsMoreSupportEngaged:
  datatype: boolean
  deprecation: v5.0 - refactored to Seat.Backrest.IsMoreLumbarSupportSwitchEngaged
  description: Is switch for more lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).
  type: actuator

Vehicle.Cabin.Seat.Switch.Backrest.Lumbar.IsUpEngaged:
  datatype: boolean
  deprecation: v5.0 - refactored to Seat.Backrest.IsLumbarUpSwitchEngaged
  description: Lumbar up switch engaged (SingleSeat.Backrest.Lumbar.Support).
  type: actuator

Vehicle.Cabin.Seat.Switch.Backrest.SideBolster:
  deprecation: v5.0 - nested properties refactored to Seat.Backrest.<Property>
  description: Switches for SingleSeat.Backrest.SideBolster.
  type: branch

Vehicle.Cabin.Seat.Switch.Backrest.SideBolster.IsLessSupportEngaged:
  datatype: boolean
  deprecation: v5.0 - refactored to Seat.Backrest.IsLessSideBolsterSupportSwitchEngaged
  description: Is switch for less side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).
  type: actuator

Vehicle.Cabin.Seat.Switch.Backrest.SideBolster.IsMoreSupportEngaged:
  datatype: boolean
  deprecation: v5.0 - refactored to Seat.Backrest.IsMoreSideBolsterSupportSwitchEngaged
  description: Is switch for more side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).
  type: actuator

Vehicle.Cabin.Seat.Switch.Headrest:
  deprecation: v5.0 - nested properties moved to to Seat.Headrest.<Property>
  description: Switches for SingleSeat.Headrest.
  type: branch

Vehicle.Cabin.Seat.Switch.Headrest.IsBackwardEngaged:
  datatype: boolean
  deprecation: v5.0 - refactored to to Seat.Headrest.IsBackwardSwitchEngaged
  description: Head rest backward switch engaged (SingleSeat.Headrest.Angle).
  type: actuator

Vehicle.Cabin.Seat.Switch.Headrest.IsDownEngaged:
  datatype: boolean
  deprecation: v5.0 - refactored to to Seat.Headrest.IsDownSwitchEngaged
  description: Head rest down switch engaged (SingleSeat.Headrest.Height).
  type: actuator

Vehicle.Cabin.Seat.Switch.Headrest.IsForwardEngaged:
  datatype: boolean
  deprecation: v5.0 - refactored to to Seat.Headrest.IsForwardSwitchEngaged
  description: Head rest forward switch engaged (SingleSeat.Headrest.Angle).
  type: actuator

Vehicle.Cabin.Seat.Switch.Headrest.IsUpEngaged:
  datatype: boolean
  deprecation: v5.0 - refactored to to Seat.Headrest.IsUpSwitchEngaged
  description: Head rest up switch engaged (SingleSeat.Headrest.Height).
  type: actuator

Vehicle.Cabin.Seat.Switch.IsBackwardEngaged:
  datatype: boolean
  deprecation: v5.0 - refactored to Seat.IsBackwardSwitchEngaged
  description: Seat backward switch engaged (SingleSeat.Position).
  type: actuator

Vehicle.Cabin.Seat.Switch.IsCoolerEngaged:
  datatype: boolean
  deprecation: v5.0 - refactored to Seat.IsCoolerSwitchEngaged
  description: Cooler switch for Seat heater (SingleSeat.Heating).
  type: actuator

Vehicle.Cabin.Seat.Switch.IsDownEngaged:
  datatype: boolean
  deprecation: v5.0 - refactored to Seat.IsDownSwitchEngaged
  description: Seat down switch engaged (SingleSeat.Height).
  type: actuator

Vehicle.Cabin.Seat.Switch.IsForwardEngaged:
  datatype: boolean
  deprecation: v5.0 - refactored to Seat.IsForwardSwitchEngaged
  description: Seat forward switch engaged (SingleSeat.Position).
  type: actuator

Vehicle.Cabin.Seat.Switch.IsTiltBackwardEngaged:
  datatype: boolean
  deprecation: v5.0 - refactored to Seat.IsTiltBackwardSwitchEngaged
  description: Tilt backward switch engaged (SingleSeat.Tilt).
  type: actuator

Vehicle.Cabin.Seat.Switch.IsTiltForwardEngaged:
  datatype: boolean
  deprecation: v5.0 - refactored to Seat.IsTiltForwardSwitchEngaged
  description: Tilt forward switch engaged (SingleSeat.Tilt).
  type: actuator

Vehicle.Cabin.Seat.Switch.IsUpEngaged:
  datatype: boolean
  deprecation: v5.0 - refactored to Seat.IsUpSwitchEngaged
  description: Seat up switch engaged (SingleSeat.Height).
  type: actuator

Vehicle.Cabin.Seat.Switch.IsWarmerEngaged:
  datatype: boolean
  deprecation: v5.0 - refactored to Seat.IsWarmerSwitchEngaged
  description: Warmer switch for Seat heater (SingleSeat.Heating).
  type: actuator

Vehicle.Cabin.Seat.Switch.Massage:
  deprecation: v5.0 - nested properties moved to Seat.<Property>
  description: Switches for SingleSeat.Massage.
  type: branch

Vehicle.Cabin.Seat.Switch.Massage.IsDecreaseEngaged:
  datatype: boolean
  deprecation: v5.0 - refactored to Seat.IsDecreaseMassageLevelSwitchEngaged
  description: Decrease massage level switch engaged (SingleSeat.Massage).
  type: actuator

Vehicle.Cabin.Seat.Switch.Massage.IsIncreaseEngaged:
  datatype: boolean
  deprecation: v5.0 - refactored to Seat.IsIncreaseMassageLevelSwitchEngaged
  description: Increase massage level switch engaged (SingleSeat.Massage).
  type: actuator

Vehicle.Cabin.Seat.Switch.Seating:
  deprecation: v5.0 - nested properties moved to Seat.Seating.<Property>.
  description: Describes switches related to the seating of the seat.
  type: branch

Vehicle.Cabin.Seat.Switch.Seating.IsBackwardEngaged:
  datatype: boolean
  deprecation: v5.0 - refactored to Seat.Seating.IsBackwardSwitchEngaged
  description: Is switch to decrease seating length engaged (SingleSeat.Seating.Length).
  type: actuator

Vehicle.Cabin.Seat.Switch.Seating.IsForwardEngaged:
  datatype: boolean
  deprecation: v5.0 - refactored to Seat.Seating.IsForwardSwitchEngaged
  description: Is switch to increase seating length engaged (SingleSeat.Seating.Length).
  type: actuator

Vehicle.Cabin.Seat.Tilt:
  comment: In VSS it is assumed that tilting a seat affects both seating (seat bottom) and backrest, i.e. the angle between seating and backrest will not be affected when changing Tilt.
  datatype: float
  description: Tilting of seat (seating and backrest) relative to vehicle x-axis. 0 = seat bottom is flat, seat bottom and vehicle x-axis are parallel. Positive degrees = seat tilted backwards, seat x-axis tilted upward, seat z-axis is tilted backward.
  type: actuator
  unit: degrees

Vehicle.Cabin.SeatPosCount:
  comment: Default value corresponds to two seats in front row and 3 seats in second row.
  datatype: uint8[]
  default:
  - 2
  - 3
  description: Number of seats across each row from the front to the rear.
  type: attribute

Vehicle.Cabin.SeatRowCount:
  comment: Default value corresponds to two rows of seats.
  datatype: uint8
  default: 2
  description: Number of seat rows in vehicle.
  type: attribute

Vehicle.Cabin.Sunroof:
  description: Sun roof status.
  type: branch

Vehicle.Cabin.Sunroof.Position:
  datatype: int8
  description: Sunroof position. 0 = Fully closed 100 = Fully opened. -100 = Fully tilted.
  max: 100
  min: -100
  type: sensor
  unit: percent

Vehicle.Cabin.Sunroof.Shade:
  description: Sun roof shade status. Open = Retracted, Closed = Deployed. Start position for Sunroof.Shade is Open/Retracted.
  type: branch

Vehicle.Cabin.Sunroof.Shade.IsOpen:
  datatype: boolean
  description: Is item open or closed? True = Fully or partially open. False = Fully closed.
  type: actuator

Vehicle.Cabin.Sunroof.Shade.Position:
  comment: Relationship between Open/Close and Start/End position is item dependent.
  datatype: uint8
  description: Item position. 0 = Start position 100 = End position.
  max: 100
  min: 0
  type: actuator
  unit: percent

Vehicle.Cabin.Sunroof.Shade.Switch:
  allowed:
  - INACTIVE
  - CLOSE
  - OPEN
  - ONE_SHOT_CLOSE
  - ONE_SHOT_OPEN
  datatype: string
  description: Switch controlling sliding action such as window, sunroof, or blind.
  type: actuator

Vehicle.Cabin.Sunroof.Switch:
  allowed:
  - INACTIVE
  - CLOSE
  - OPEN
  - ONE_SHOT_CLOSE
  - ONE_SHOT_OPEN
  - TILT_UP
  - TILT_DOWN
  datatype: string
  description: Switch controlling sliding action such as window, sunroof, or shade.
  type: actuator

Vehicle.CargoVolume:
  datatype: float
  description: The available volume for cargo or luggage. For automobiles, this is usually the trunk volume.
  min: 0
  type: attribute
  unit: l

Vehicle.Chassis:
  description: All data concerning steering, suspension, wheels, and brakes.
  type: branch

Vehicle.Chassis.Accelerator:
  description: Accelerator signals
  type: branch

Vehicle.Chassis.Accelerator.PedalPosition:
  datatype: uint8
  description: Accelerator pedal position as percent. 0 = Not depressed. 100 = Fully depressed.
  max: 100
  min: 0
  type: sensor
  unit: percent

Vehicle.Chassis.Axle:
  description: Axle signals
  instances:
  - Row[1,2]
  type: branch

Vehicle.Chassis.Axle.AxleWidth:
  comment: Corresponds to SAE J1100-2009 W113.
  datatype: uint16
  description: The lateral distance between the wheel mounting faces, measured along the spindle axis.
  type: attribute
  unit: mm

Vehicle.Chassis.Axle.SteeringAngle:
  comment: Single track two-axle model steering angle refers to the angle that a centrally mounted wheel would have.
  datatype: float
  description: Single track two-axle model steering angle. Angle according to ISO 8855. Positive = degrees to the left. Negative = degrees to the right.
  type: sensor
  unit: degrees

Vehicle.Chassis.Axle.TireAspectRatio:
  datatype: uint8
  description: Aspect ratio between tire section height and tire section width, as per ETRTO / TRA standard.
  type: attribute
  unit: percent

Vehicle.Chassis.Axle.TireDiameter:
  datatype: float
  description: Outer diameter of tires, in inches, as per ETRTO / TRA standard.
  type: attribute
  unit: inch

Vehicle.Chassis.Axle.TireWidth:
  datatype: uint16
  description: Nominal section width of tires, in mm, as per ETRTO / TRA standard.
  type: attribute
  unit: mm

Vehicle.Chassis.Axle.TrackWidth:
  comment: Corresponds to SAE J1100-2009 W102.
  datatype: uint16
  description: The lateral distance between the centers of the wheels, measured along the spindle, or axle axis. If there are dual rear wheels, measure from the midway points between the inner and outer tires.
  type: attribute
  unit: mm

Vehicle.Chassis.Axle.TreadWidth:
  comment: Corresponds to SAE J1100-2009 W101.
  datatype: uint16
  description: The lateral distance between the centerlines of the base tires at ground, including camber angle. If there are dual rear wheels, measure from the midway points between the inner and outer tires.
  type: attribute
  unit: mm

Vehicle.Chassis.Axle.Wheel:
  description: Wheel signals for axle
  instances:
  - Left
  - Right
  type: branch

Vehicle.Chassis.Axle.Wheel.AngularSpeed:
  comment: Positive if wheel is trying to drive vehicle forward. Negative if wheel is trying to drive vehicle backward.
  datatype: float
  description: Angular (Rotational) speed of a vehicle's wheel.
  type: sensor
  unit: degrees/s

Vehicle.Chassis.Axle.Wheel.Brake:
  description: Brake signals for wheel
  type: branch

Vehicle.Chassis.Axle.Wheel.Brake.FluidLevel:
  datatype: uint8
  description: Brake fluid level as percent. 0 = Empty. 100 = Full.
  max: 100
  type: sensor
  unit: percent

Vehicle.Chassis.Axle.Wheel.Brake.IsBrakesWorn:
  datatype: boolean
  description: Brake pad wear status. True = Worn. False = Not Worn.
  type: sensor

Vehicle.Chassis.Axle.Wheel.Brake.IsFluidLevelLow:
  datatype: boolean
  description: Brake fluid level status. True = Brake fluid level low. False = Brake fluid level OK.
  type: sensor

Vehicle.Chassis.Axle.Wheel.Brake.PadWear:
  datatype: uint8
  description: Brake pad wear as percent. 0 = No Wear. 100 = Worn.
  max: 100
  type: sensor
  unit: percent

Vehicle.Chassis.Axle.Wheel.Speed:
  datatype: float
  description: Linear speed of a vehicle's wheel.
  type: sensor
  unit: km/h

Vehicle.Chassis.Axle.Wheel.Tire:
  description: Tire signals for wheel.
  type: branch

Vehicle.Chassis.Axle.Wheel.Tire.IsPressureLow:
  datatype: boolean
  description: Tire Pressure Status. True = Low tire pressure. False = Good tire pressure.
  type: sensor

Vehicle.Chassis.Axle.Wheel.Tire.Pressure:
  datatype: uint16
  description: Tire pressure in kilo-Pascal.
  type: sensor
  unit: kPa

Vehicle.Chassis.Axle.Wheel.Tire.Temperature:
  datatype: float
  description: Tire temperature in Celsius.
  type: sensor
  unit: celsius

Vehicle.Chassis.Axle.WheelCount:
  datatype: uint8
  description: Number of wheels on the axle
  type: attribute

Vehicle.Chassis.Axle.WheelDiameter:
  datatype: float
  description: Diameter of wheels (rims without tires), in inches, as per ETRTO / TRA standard.
  type: attribute
  unit: inch

Vehicle.Chassis.Axle.WheelWidth:
  datatype: float
  description: Width of wheels (rims without tires), in inches, as per ETRTO / TRA standard.
  type: attribute
  unit: inch

Vehicle.Chassis.AxleCount:
  datatype: uint8
  default: 2
  description: Number of axles on the vehicle
  type: attribute

Vehicle.Chassis.Brake:
  description: Brake system signals
  type: branch

Vehicle.Chassis.Brake.IsDriverEmergencyBrakingDetected:
  comment: Detection of emergency braking can trigger Emergency Brake Assist (EBA) to engage.
  datatype: boolean
  description: Indicates if emergency braking initiated by driver is detected. True = Emergency braking detected. False = Emergency braking not detected.
  type: sensor

Vehicle.Chassis.Brake.PedalPosition:
  datatype: uint8
  description: Brake pedal position as percent. 0 = Not depressed. 100 = Fully depressed.
  max: 100
  min: 0
  type: sensor
  unit: percent

Vehicle.Chassis.ParkingBrake:
  description: Parking brake signals
  type: branch

Vehicle.Chassis.ParkingBrake.IsAutoApplyEnabled:
  datatype: boolean
  description: Indicates if parking brake will be automatically engaged when the vehicle engine is turned off.
  type: actuator

Vehicle.Chassis.ParkingBrake.IsEngaged:
  datatype: boolean
  description: Parking brake status. True = Parking Brake is Engaged. False = Parking Brake is not Engaged.
  type: actuator

Vehicle.Chassis.SteeringWheel:
  description: Steering wheel signals
  type: branch

Vehicle.Chassis.SteeringWheel.Angle:
  datatype: int16
  description: Steering wheel angle. Positive = degrees to the left. Negative = degrees to the right.
  type: sensor
  unit: degrees

Vehicle.Chassis.SteeringWheel.Extension:
  datatype: uint8
  description: Steering wheel column extension from dashboard. 0 = Closest to dashboard. 100 = Furthest from dashboard.
  max: 100
  min: 0
  type: actuator
  unit: percent

Vehicle.Chassis.SteeringWheel.HeatingCooling:
  datatype: int8
  description: Heating or Cooling requsted for the Item. -100 = Maximum cooling, 0 = Heating/cooling deactivated, 100 = Maximum heating.
  max: 100
  min: -100
  type: actuator
  unit: percent

Vehicle.Chassis.SteeringWheel.Tilt:
  datatype: uint8
  description: Steering wheel column tilt. 0 = Lowest position. 100 = Highest position.
  max: 100
  min: 0
  type: actuator
  unit: percent

Vehicle.Chassis.Wheelbase:
  datatype: uint16
  default: 0
  description: Overall wheelbase, in mm.
  type: attribute
  unit: mm

Vehicle.Connectivity:
  description: Connectivity data.
  type: branch

Vehicle.Connectivity.IsConnectivityAvailable:
  comment: This signal can be used by onboard vehicle services to decide what features that shall be offered to the driver, for example disable the 'check for update' button if vehicle does not have connectivity.
  datatype: boolean
  description: Indicates if connectivity between vehicle and cloud is available. True = Connectivity is available. False = Connectivity is not available.
  type: sensor

Vehicle.CurbWeight:
  datatype: uint16
  default: 0
  description: Vehicle curb weight, including all liquids and full tank of fuel, but no cargo or passengers.
  type: attribute
  unit: kg

Vehicle.CurrentLocation:
  description: The current latitude and longitude of the vehicle.
  type: branch

Vehicle.CurrentLocation.Altitude:
  datatype: double
  description: Current altitude relative to WGS 84 reference ellipsoid, as measured at the position of GNSS receiver antenna.
  type: sensor
  unit: m

Vehicle.CurrentLocation.GNSSReceiver:
  description: Information on the GNSS receiver used for determining current location.
  type: branch

Vehicle.CurrentLocation.GNSSReceiver.FixType:
  allowed:
  - NONE
  - TWO_D
  - TWO_D_SATELLITE_BASED_AUGMENTATION
  - TWO_D_GROUND_BASED_AUGMENTATION
  - TWO_D_SATELLITE_AND_GROUND_BASED_AUGMENTATION
  - THREE_D
  - THREE_D_SATELLITE_BASED_AUGMENTATION
  - THREE_D_GROUND_BASED_AUGMENTATION
  - THREE_D_SATELLITE_AND_GROUND_BASED_AUGMENTATION
  datatype: string
  description: Fix status of GNSS receiver.
  type: sensor

Vehicle.CurrentLocation.GNSSReceiver.MountingPosition:
  description: Mounting position of GNSS receiver antenna relative to vehicle coordinate system. Axis definitions according to ISO 8855. Origin at center of (first) rear axle.
  type: branch

Vehicle.CurrentLocation.GNSSReceiver.MountingPosition.X:
  datatype: int16
  description: Mounting position of GNSS receiver antenna relative to vehicle coordinate system. Axis definitions according to ISO 8855. Origin at center of (first) rear axle. Positive values = forward of rear axle. Negative values = backward of rear axle.
  type: attribute
  unit: mm

Vehicle.CurrentLocation.GNSSReceiver.MountingPosition.Y:
  datatype: int16
  description: Mounting position of GNSS receiver antenna relative to vehicle coordinate system. Axis definitions according to ISO 8855. Origin at center of (first) rear axle. Positive values = left of origin. Negative values = right of origin. Left/Right is as seen from driver perspective, i.e. by a person looking forward.
  type: attribute
  unit: mm

Vehicle.CurrentLocation.GNSSReceiver.MountingPosition.Z:
  datatype: int16
  description: Mounting position of GNSS receiver on Z-axis. Axis definitions according to ISO 8855. Origin at center of (first) rear axle. Positive values = above center of rear axle. Negative values = below center of rear axle.
  type: attribute
  unit: mm

Vehicle.CurrentLocation.Heading:
  datatype: double
  description: Current heading relative to geographic north. 0 = North, 90 = East, 180 = South, 270 = West.
  max: 360
  min: 0
  type: sensor
  unit: degrees

Vehicle.CurrentLocation.HorizontalAccuracy:
  datatype: double
  description: Accuracy of the latitude and longitude coordinates.
  type: sensor
  unit: m

Vehicle.CurrentLocation.Latitude:
  datatype: double
  description: Current latitude of vehicle in WGS 84 geodetic coordinates, as measured at the position of GNSS receiver antenna.
  max: 90
  min: -90
  type: sensor
  unit: degrees

Vehicle.CurrentLocation.Longitude:
  datatype: double
  description: Current longitude of vehicle in WGS 84 geodetic coordinates, as measured at the position of GNSS receiver antenna.
  max: 180
  min: -180
  type: sensor
  unit: degrees

Vehicle.CurrentLocation.Timestamp:
  datatype: string
  description: Timestamp from GNSS system for current location, formatted according to ISO 8601 with UTC time zone.
  type: sensor
  unit: iso8601

Vehicle.CurrentLocation.VerticalAccuracy:
  datatype: double
  description: Accuracy of altitude.
  type: sensor
  unit: m

Vehicle.CurrentOverallWeight:
  datatype: uint16
  description: Current overall Vehicle weight. Including passengers, cargo and other load inside the car.
  type: sensor
  unit: kg

Vehicle.Diagnostics:
  description: Diagnostics data.
  type: branch

Vehicle.Diagnostics.DTCCount:
  datatype: uint8
  description: Number of Diagnostic Trouble Codes (DTC)
  type: sensor

Vehicle.Diagnostics.DTCList:
  datatype: string[]
  description: List of currently active DTCs formatted according OBD II (SAE-J2012DA_201812) standard ([P|C|B|U]XXXXX )
  type: sensor

Vehicle.Driver:
  description: Driver data.
  type: branch

Vehicle.Driver.AttentiveProbability:
  datatype: float
  description: Probability of attentiveness of the driver.
  max: 100
  min: 0
  type: sensor
  unit: percent

Vehicle.Driver.DistractionLevel:
  datatype: float
  description: Distraction level of the driver, which can be evaluated by multiple factors e.g. driving situation, acoustical or optical signals inside the cockpit, ongoing phone calls.
  max: 100
  min: 0
  type: sensor
  unit: percent

Vehicle.Driver.FatigueLevel:
  datatype: float
  description: Fatigue level of the driver, which can be evaluated by multiple factors e.g. trip time, behaviour of steering, eye status.
  max: 100
  min: 0
  type: sensor
  unit: percent

Vehicle.Driver.HeartRate:
  datatype: uint16
  description: Heart rate of the driver.
  type: sensor
  unit: bpm

Vehicle.Driver.Identifier:
  deprecation: v5.0 - use data from Vehicle.Occupant.*.*.Identifier.
  description: Identifier attributes based on OAuth 2.0.
  type: branch

Vehicle.Driver.Identifier.Issuer:
  datatype: string
  deprecation: v5.0 - use data from Vehicle.Occupant.*.*.Identifier.
  description: Unique Issuer for the authentication of the occupant e.g. https://accounts.funcorp.com.
  type: sensor

Vehicle.Driver.Identifier.Subject:
  datatype: string
  deprecation: v5.0 - use data from Vehicle.Occupant.*.*.Identifier.
  description: Subject for the authentication of the occupant e.g. UserID 7331677.
  type: sensor

Vehicle.Driver.IsEyesOnRoad:
  datatype: boolean
  description: Has driver the eyes on road or not?
  type: sensor

Vehicle.Driver.IsHandsOnWheel:
  datatype: boolean
  description: Are the driver's hands on the steering wheel or not?
  type: sensor

Vehicle.EmissionsCO2:
  datatype: int16
  description: The CO2 emissions.
  type: attribute
  unit: g/km

Vehicle.Exterior:
  description: Information about exterior measured by vehicle.
  type: branch

Vehicle.Exterior.AirTemperature:
  datatype: float
  description: Air temperature outside the vehicle.
  type: sensor
  unit: celsius

Vehicle.Exterior.Humidity:
  datatype: float
  description: Relative humidity outside the vehicle. 0 = Dry, 100 = Air fully saturated.
  max: 100
  min: 0
  type: sensor
  unit: percent

Vehicle.Exterior.LightIntensity:
  comment: Mapping to physical units and calculation method is sensor specific.
  datatype: float
  description: Light intensity outside the vehicle. 0 = No light detected, 100 = Fully lit.
  max: 100
  min: 0
  type: sensor
  unit: percent

Vehicle.GrossWeight:
  datatype: uint16
  default: 0
  description: Curb weight of vehicle, including all liquids and full tank of fuel and full load of cargo and passengers.
  type: attribute
  unit: kg

Vehicle.Height:
  datatype: uint16
  default: 0
  description: Overall vehicle height.
  type: attribute
  unit: mm

Vehicle.IsAutoPowerOptimize:
  datatype: boolean
  description: Auto Power Optimization Flag When set to 'true', the system enables automatic power optimization, dynamically adjusting the power optimization level based on runtime conditions or features managed by the OEM. When set to 'false', manual control of the power optimization level is allowed.
  type: actuator

Vehicle.IsBrokenDown:
  comment: Actual criteria and method used to decide if a vehicle is broken down is implementation specific.
  datatype: boolean
  description: Vehicle breakdown or any similar event causing vehicle to stop on the road, that might pose a risk to other road users. True = Vehicle broken down on the road, due to e.g. engine problems, flat tire, out of gas, brake problems. False = Vehicle not broken down.
  type: sensor

Vehicle.IsMoving:
  datatype: boolean
  description: Indicates whether the vehicle is stationary or moving.
  type: sensor

Vehicle.Length:
  datatype: uint16
  default: 0
  description: Overall vehicle length.
  type: attribute
  unit: mm

Vehicle.LowVoltageBattery:
  description: Signals related to low voltage battery.
  type: branch

Vehicle.LowVoltageBattery.CurrentCurrent:
  datatype: float
  description: Current current flowing in/out of the low voltage battery. Positive = Current flowing in to battery, e.g. during charging or driving. Negative = Current flowing out of battery, e.g. when using the battery to start a combustion engine.
  type: sensor
  unit: A

Vehicle.LowVoltageBattery.CurrentVoltage:
  datatype: float
  description: Current Voltage of the low voltage battery.
  type: sensor
  unit: V

Vehicle.LowVoltageBattery.NominalCapacity:
  datatype: uint16
  description: Nominal capacity of the low voltage battery.
  type: attribute
  unit: Ah

Vehicle.LowVoltageBattery.NominalVoltage:
  comment: Nominal voltage typically refers to voltage of fully charged battery when delivering rated capacity.
  datatype: uint16
  description: Nominal Voltage of the battery.
  type: attribute
  unit: V

Vehicle.LowVoltageSystemState:
  allowed:
  - UNDEFINED
  - LOCK
  - 'OFF'
  - ACC
  - 'ON'
  - START
  datatype: string
  description: State of the supply voltage of the control units (usually 12V).
  type: sensor

Vehicle.MaxTowBallWeight:
  datatype: uint16
  default: 0
  description: Maximum vertical weight on the tow ball of a trailer.
  type: attribute
  unit: kg

Vehicle.MaxTowWeight:
  datatype: uint16
  default: 0
  description: Maximum weight of trailer.
  type: attribute
  unit: kg

Vehicle.MotionManagement:
  description: Motion Management Information.
  type: branch

Vehicle.MotionManagement.Brake:
  description: MotionManagement related to braking (both frictions brakes and contribution from electric axles).
  type: branch

Vehicle.MotionManagement.Brake.Axle:
  description: MotionManagement for brake actuation for a specific electric axle.
  instances:
  - Row[1,2]
  type: branch

Vehicle.MotionManagement.Brake.Axle.TorqueDistributionFrictionRightMaximum:
  datatype: uint16
  description: Maximum distribution range of the friction brake request on the axle to the right wheel. 0% = Complete friction torque shall be shifted to the left wheel. 50% = At most 50% friction torque may be shifted to the right wheel. 100% = Complete friction torque may be shifted to the right wheel.
  max: 100
  min: 0
  type: actuator
  unit: percent

Vehicle.MotionManagement.Brake.Axle.TorqueDistributionFrictionRightMinimum:
  datatype: uint16
  description: Minimum distribution range of the friction brake request on the axle to the right wheel. 0% = Complete friction torque may be shifted to the left wheel. 50% = At least 50% friction torque shall be shifted to the right wheel. 100% = Complete friction torque shall be shifted to the right wheel.
  max: 100
  min: 0
  type: actuator
  unit: percent

Vehicle.MotionManagement.Brake.Axle.TorqueElectricMinimum:
  datatype: int16
  description: Limit for regenerative brake torque at given axle. Brake Torque < 0Nm.
  max: 0
  type: actuator
  unit: Nm

Vehicle.MotionManagement.Brake.Axle.TorqueFrictionDifferenceMaximum:
  datatype: uint16
  description: Maximum absolute wheel torque difference between left and right wheel for friction brake.
  type: actuator
  unit: Nm

Vehicle.MotionManagement.Brake.Axle.Wheel:
  description: MotionManagement signals for a specific wheel.
  instances:
  - Left
  - Right
  type: branch

Vehicle.MotionManagement.Brake.Axle.Wheel.OmegaLower:
  datatype: uint16
  description: Lower wheel speed limit request controlled by friction brake. ISO 8855 wheel-spin velocity.
  type: actuator
  unit: rad/s

Vehicle.MotionManagement.Brake.Axle.Wheel.OmegaUpper:
  datatype: uint16
  description: Upper wheel speed limit request controlled by friction brake. ISO 8855 wheel-spin velocity.
  type: actuator
  unit: rad/s

Vehicle.MotionManagement.Brake.Axle.Wheel.Torque:
  datatype: int16
  description: Estimated friction brake torque. Brake Torque < 0Nm.
  max: 0
  type: sensor
  unit: Nm

Vehicle.MotionManagement.Brake.Axle.Wheel.TorqueArbitrated:
  datatype: int16
  description: Brake system internally calculated friction brake torque target. Brake Torque < 0Nm.
  max: 0
  type: sensor
  unit: Nm

Vehicle.MotionManagement.Brake.Axle.Wheel.TorqueFrictionMaximum:
  datatype: int16
  description: Maximum wheel torque request for friction brake. Brake Torque < 0Nm.
  max: 0
  type: actuator
  unit: Nm

Vehicle.MotionManagement.Brake.Axle.Wheel.TorqueFrictionMinimum:
  datatype: int16
  description: Minimum wheel torque request for friction brake. Brake Torque < 0Nm.
  max: 0
  type: actuator
  unit: Nm

Vehicle.MotionManagement.Brake.VehicleForceDistributionFrontMaximum:
  datatype: uint16
  description: Maximum distribution range request of FxWhlSum to front axle. 0% = Complete longitudinal brake force shall be shifted to rear axle. 50% = At most 50% shall be shifted to front axle. 100%  = Complete longitudinal brake force may be shifted to front axle.
  max: 100
  min: 0
  type: actuator
  unit: percent

Vehicle.MotionManagement.Brake.VehicleForceDistributionFrontMinimum:
  datatype: uint16
  description: Minimum distribution range request of FxWhlSum to front axle. 0% = Complete longitudinal brake force may be shifted to rear axle. 50% = At least 50% shall be shifted to front axle. 100% = Complete longitudinal brake force shall be shifted to front axle.
  max: 100
  min: 0
  type: actuator
  unit: percent

Vehicle.MotionManagement.Brake.VehicleForceElectric:
  datatype: int16
  description: Regenerative brake force request (FxWhlSum). Sum of all tyre longitudinal forces. Brake Force < 0N.
  max: 0
  type: actuator
  unit: N

Vehicle.MotionManagement.Brake.VehicleForceElectricMinimumArbitrated:
  datatype: int16
  description: Brake system internally calculated regenerative force limit at vehicle level for eAxle actuation. Brake Force < 0N.
  max: 0
  type: sensor
  unit: N

Vehicle.MotionManagement.Brake.VehicleForceMaximum:
  datatype: int16
  description: Maximum longitudinal brake force request (FxWhlSum). Sum of all tyre longitudinal forces. Brake Force < 0N.
  max: 0
  type: actuator
  unit: N

Vehicle.MotionManagement.ElectricAxle:
  description: MotionManagement for a specific electric axle.
  instances:
  - Row[1,2]
  type: branch

Vehicle.MotionManagement.ElectricAxle.RotationalSpeed:
  datatype: int16
  description: Rotational speed for the specified axle, positive sign for rotation in forward direction, negative sign for rotation in backward direction.
  type: sensor
  unit: rpm

Vehicle.MotionManagement.ElectricAxle.RotationalSpeedMaximumLimit:
  datatype: int16
  description: Maximum allowed axle rotational speed in torque control mode, positive sign for rotation in forward direction, negative sign for rotation in backward direction.
  type: actuator
  unit: rpm

Vehicle.MotionManagement.ElectricAxle.RotationalSpeedMinimumLimit:
  datatype: int16
  description: Minimum allowed axle rotational speed in torque control mode, positive sign for rotation in forward direction, negative sign for rotation in backward direction.
  type: actuator
  unit: rpm

Vehicle.MotionManagement.ElectricAxle.RotationalSpeedTarget:
  datatype: int16
  description: Target axle rotational speed in rotation speed control mode, positive sign for rotation in forward direction, negative sign for rotation in backward direction.
  type: actuator
  unit: rpm

Vehicle.MotionManagement.ElectricAxle.Torque:
  datatype: int16
  description: Axle torque, positive sign for torque in forward direction, negative sign for torque in backward direction.
  type: sensor
  unit: Nm

Vehicle.MotionManagement.ElectricAxle.TorqueMaximum:
  datatype: int16
  description: Maximum momentarily available eAxle torque, positive sign for torque in forward direction, negative sign for torque in backward direction.
  type: sensor
  unit: Nm

Vehicle.MotionManagement.ElectricAxle.TorqueMaximumLimit:
  datatype: int16
  description: Maximum allowed eAxle torque in rotation speed control mode, positive sign for torque in forward direction, negative sign unused.
  type: actuator
  unit: Nm

Vehicle.MotionManagement.ElectricAxle.TorqueMinimum:
  datatype: int16
  description: Minimum momentarily available eAxle torque, positive sign for torque in forward direction, negative sign for torque in backward direction.
  type: sensor
  unit: Nm

Vehicle.MotionManagement.ElectricAxle.TorqueMinimumLimit:
  datatype: int16
  description: Minimum allowed axle torque in rotation speed control mode, positive sign unused, negative sign for torque in backward direction (ISO8855).
  type: actuator
  unit: Nm

Vehicle.MotionManagement.ElectricAxle.TorqueTarget:
  datatype: int16
  description: Target axle torque in torque control mode, positive sign for torque in forward direction, negative sign for torque in backward direction (ISO8855).
  type: actuator
  unit: Nm

Vehicle.MotionManagement.Steering:
  description: MotionManagement related to steering.
  type: branch

Vehicle.MotionManagement.Steering.Axle:
  comment: The instantiation only considers axles that are steerable. Row[1,1] indicates that one axle is steerable, but does not indicate which axle.
  description: MotionManagement related to a specific axle.
  instances:
  - Row[1,1]
  type: branch

Vehicle.MotionManagement.Steering.Axle.RackPosition:
  datatype: int16
  description: Represents the current position of the steering rack on axle steering actuator. Positive values leads to a left turn of the vehicle (based on ISO8855).
  type: sensor
  unit: mm

Vehicle.MotionManagement.Steering.Axle.RackPositionOffsetTarget:
  datatype: int16
  description: Rack position offset request to the axle steering actuator (for steer-by-wire), added to the actuator internal calculated set-point. Positive values without internal calculated set point change lead to a left movement of the vehicle (based on ISO8855).
  type: actuator
  unit: mm

Vehicle.MotionManagement.Steering.Axle.RackPositionOffsetTargetMode:
  datatype: uint8
  description: Mode used for controlling rack position offset interface of axle steering actuator. 0 indicates interface disabled. Other values activate vehicle specific modes.
  type: actuator

Vehicle.MotionManagement.Steering.Axle.RackPositionTarget:
  datatype: int16
  description: Rack position request to the axle steering actuator (external set-point). Positive values lead to a left turn of the vehicle (based on ISO8855).
  type: actuator
  unit: mm

Vehicle.MotionManagement.Steering.Axle.RackPositionTargetMode:
  datatype: uint8
  description: Mode used for controlling rack position interface of axle steering actuator. 0 indicates interface disabled. Other values activate vehicle specific modes.
  type: actuator

Vehicle.MotionManagement.Steering.SteeringWheel:
  description: MotionManagement related to steering wheel.
  type: branch

Vehicle.MotionManagement.Steering.SteeringWheel.Angle:
  datatype: int16
  description: Represents the current input angle of the steering system, typically corresponds to angle applied by driver on the steering-wheel. Positive for angle in counterclockwise direction (based on ISO8855).
  type: sensor
  unit: degrees

Vehicle.MotionManagement.Steering.SteeringWheel.AngleTarget:
  datatype: int16
  description: Steering-wheel angle request to the steering actuator (external set-point for steer-by-wire). Positive sign for angle in counterclockwise direction (based on ISO8855).
  type: actuator
  unit: degrees

Vehicle.MotionManagement.Steering.SteeringWheel.AngleTargetMode:
  datatype: uint8
  description: Mode used for controlling Steering-wheel angle interface. 0 indicates interface disabled. Other values activate vehicle specific modes.
  type: actuator

Vehicle.MotionManagement.Steering.SteeringWheel.Torque:
  datatype: int16
  description: Represents the current input torque for steering system, typically corresponds to torque applied by driver on the steering wheel. Positive for torque in counterclockwise direction (based on ISO8855).
  type: sensor
  unit: Nm

Vehicle.MotionManagement.Steering.SteeringWheel.TorqueOffsetTarget:
  datatype: int16
  description: Steering-wheel torque offset request to the steering actuator, added to the actuator internal calculated target value. Positive sign for torque in counterclockwise direction (based on ISO8855).
  type: actuator
  unit: Nm

Vehicle.MotionManagement.Steering.SteeringWheel.TorqueOffsetTargetMode:
  datatype: uint8
  description: Mode used for controlling steering-wheel torque offset interface. 0 indicates interface disabled. Other values activate vehicle specific modes.
  type: actuator

Vehicle.MotionManagement.Steering.SteeringWheel.TorqueTarget:
  datatype: int16
  description: Steering-wheel torque request to the steering actuator (external set-point for steer-by-wire). Positive sign for torque in counterclockwise direction (based on ISO8855).
  type: actuator
  unit: Nm

Vehicle.MotionManagement.Steering.SteeringWheel.TorqueTargetMode:
  datatype: uint8
  description: Mode used for controlling Steering-wheel torque interface. 0 indicates interface disabled. Other values activate vehicle specific modes.
  type: actuator

Vehicle.OBD:
  description: OBD data.
  type: branch

Vehicle.OBD.AbsoluteLoad:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 43 - Absolute load value
  type: sensor
  unit: percent

Vehicle.OBD.AcceleratorPositionD:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 49 - Accelerator pedal position D
  type: sensor
  unit: percent

Vehicle.OBD.AcceleratorPositionE:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 4A - Accelerator pedal position E
  type: sensor
  unit: percent

Vehicle.OBD.AcceleratorPositionF:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 4B - Accelerator pedal position F
  type: sensor
  unit: percent

Vehicle.OBD.AirStatus:
  datatype: string
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 12 - Secondary air status
  type: sensor

Vehicle.OBD.AmbientAirTemperature:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 46 - Ambient air temperature
  type: sensor
  unit: celsius

Vehicle.OBD.BarometricPressure:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 33 - Barometric pressure
  type: sensor
  unit: kPa

Vehicle.OBD.Catalyst:
  deprecation: v5.0 OBD-branch is deprecated.
  description: Catalyst signals
  type: branch

Vehicle.OBD.Catalyst.Bank1:
  deprecation: v5.0 OBD-branch is deprecated.
  description: Catalyst bank 1 signals
  type: branch

Vehicle.OBD.Catalyst.Bank1.Temperature1:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 3C - Catalyst temperature from bank 1, sensor 1
  type: sensor
  unit: celsius

Vehicle.OBD.Catalyst.Bank1.Temperature2:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 3E - Catalyst temperature from bank 1, sensor 2
  type: sensor
  unit: celsius

Vehicle.OBD.Catalyst.Bank2:
  deprecation: v5.0 OBD-branch is deprecated.
  description: Catalyst bank 2 signals
  type: branch

Vehicle.OBD.Catalyst.Bank2.Temperature1:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 3D - Catalyst temperature from bank 2, sensor 1
  type: sensor
  unit: celsius

Vehicle.OBD.Catalyst.Bank2.Temperature2:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 3F - Catalyst temperature from bank 2, sensor 2
  type: sensor
  unit: celsius

Vehicle.OBD.CommandedEGR:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 2C - Commanded exhaust gas recirculation (EGR)
  type: sensor
  unit: percent

Vehicle.OBD.CommandedEVAP:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 2E - Commanded evaporative purge (EVAP) valve
  type: sensor
  unit: percent

Vehicle.OBD.CommandedEquivalenceRatio:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 44 - Commanded equivalence ratio
  type: sensor
  unit: ratio

Vehicle.OBD.ControlModuleVoltage:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 42 - Control module voltage
  type: sensor
  unit: V

Vehicle.OBD.CoolantTemperature:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 05 - Coolant temperature
  type: sensor
  unit: celsius

Vehicle.OBD.DTCList:
  datatype: string[]
  deprecation: v5.0 replaced with Vehicle.Diagnostics.DTCList
  description: List of currently active DTCs formatted according OBD II (SAE-J2012DA_201812) standard ([P|C|B|U]XXXXX )
  type: sensor

Vehicle.OBD.DistanceSinceDTCClear:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 31 - Distance traveled since codes cleared
  type: sensor
  unit: km

Vehicle.OBD.DistanceWithMIL:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 21 - Distance traveled with MIL on
  type: sensor
  unit: km

Vehicle.OBD.DriveCycleStatus:
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 41 - OBD status for the current drive cycle
  type: branch

Vehicle.OBD.DriveCycleStatus.DTCCount:
  datatype: uint8
  deprecation: v5.0 OBD-branch is deprecated.
  description: Number of sensor Trouble Codes (DTC)
  type: sensor

Vehicle.OBD.DriveCycleStatus.IgnitionType:
  allowed:
  - SPARK
  - COMPRESSION
  datatype: string
  deprecation: v5.0 OBD-branch is deprecated.
  description: Type of the ignition for ICE - spark = spark plug ignition, compression = self-igniting (Diesel engines)
  type: sensor

Vehicle.OBD.DriveCycleStatus.IsMILOn:
  datatype: boolean
  deprecation: v5.0 OBD-branch is deprecated.
  description: Malfunction Indicator Light (MIL) - False = Off, True = On
  type: sensor

Vehicle.OBD.EGRError:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 2D - Exhaust gas recirculation (EGR) error
  type: sensor
  unit: percent

Vehicle.OBD.EVAPVaporPressure:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 32 - Evaporative purge (EVAP) system pressure
  type: sensor
  unit: Pa

Vehicle.OBD.EVAPVaporPressureAbsolute:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 53 - Absolute evaporative purge (EVAP) system pressure
  type: sensor
  unit: kPa

Vehicle.OBD.EVAPVaporPressureAlternate:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 54 - Alternate evaporative purge (EVAP) system pressure
  type: sensor
  unit: Pa

Vehicle.OBD.EngineLoad:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 04 - Engine load in percent - 0 = no load, 100 = full load
  type: sensor
  unit: percent

Vehicle.OBD.EngineSpeed:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 0C - Engine speed measured as rotations per minute
  type: sensor
  unit: rpm

Vehicle.OBD.EthanolPercent:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 52 - Percentage of ethanol in the fuel
  type: sensor
  unit: percent

Vehicle.OBD.FreezeDTC:
  datatype: string
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 02 - DTC that triggered the freeze frame
  type: sensor

Vehicle.OBD.FuelInjectionTiming:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 5D - Fuel injection timing
  type: sensor
  unit: degrees

Vehicle.OBD.FuelLevel:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 2F - Fuel level in the fuel tank
  type: sensor
  unit: percent

Vehicle.OBD.FuelPressure:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 0A - Fuel pressure
  type: sensor
  unit: kPa

Vehicle.OBD.FuelRailPressureAbsolute:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 59 - Absolute fuel rail pressure
  type: sensor
  unit: kPa

Vehicle.OBD.FuelRailPressureDirect:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 23 - Fuel rail pressure direct inject
  type: sensor
  unit: kPa

Vehicle.OBD.FuelRailPressureVac:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 22 - Fuel rail pressure relative to vacuum
  type: sensor
  unit: kPa

Vehicle.OBD.FuelRate:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 5E - Engine fuel rate
  type: sensor
  unit: l/h

Vehicle.OBD.FuelStatus:
  datatype: string
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 03 - Fuel status
  type: sensor

Vehicle.OBD.FuelType:
  datatype: uint8
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 51 - Fuel type
  max: 23
  min: 0
  type: attribute

Vehicle.OBD.HybridBatteryRemaining:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 5B - Remaining life of hybrid battery
  type: sensor
  unit: percent

Vehicle.OBD.IntakeTemp:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 0F - Intake temperature
  type: sensor
  unit: celsius

Vehicle.OBD.IsPTOActive:
  datatype: boolean
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 1E - Auxiliary input status (power take off)
  type: sensor

Vehicle.OBD.LongTermFuelTrim1:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 07 - Long Term (learned) Fuel Trim - Bank 1 - negative percent leaner, positive percent richer
  type: sensor
  unit: percent

Vehicle.OBD.LongTermFuelTrim2:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 09 - Long Term (learned) Fuel Trim - Bank 2 - negative percent leaner, positive percent richer
  type: sensor
  unit: percent

Vehicle.OBD.LongTermO2Trim1:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 56 (byte A) - Long term secondary O2 trim - Bank 1
  type: sensor
  unit: percent

Vehicle.OBD.LongTermO2Trim2:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 58 (byte A) - Long term secondary O2 trim - Bank 2
  type: sensor
  unit: percent

Vehicle.OBD.LongTermO2Trim3:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 56 (byte B) - Long term secondary O2 trim - Bank 3
  type: sensor
  unit: percent

Vehicle.OBD.LongTermO2Trim4:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 58 (byte B) - Long term secondary O2 trim - Bank 4
  type: sensor
  unit: percent

Vehicle.OBD.MAF:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 10 - Grams of air drawn into engine per second
  type: sensor
  unit: g/s

Vehicle.OBD.MAP:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 0B - Intake manifold pressure
  type: sensor
  unit: kPa

Vehicle.OBD.MaxMAF:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 50 - Maximum flow for mass air flow sensor
  type: sensor
  unit: g/s

Vehicle.OBD.O2:
  deprecation: v5.0 OBD-branch is deprecated.
  description: Oxygen sensors (PID 14 - PID 1B)
  instances:
  - Sensor[1,8]
  type: branch

Vehicle.OBD.O2.ShortTermFuelTrim:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 1x (byte B) - Short term fuel trim
  type: sensor
  unit: percent

Vehicle.OBD.O2.Voltage:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 1x (byte A) - Sensor voltage
  type: sensor
  unit: V

Vehicle.OBD.O2WR:
  deprecation: v5.0 OBD-branch is deprecated.
  description: Wide range/band oxygen sensors (PID 24 - 2B and PID 34 - 3B)
  instances:
  - Sensor[1,8]
  type: branch

Vehicle.OBD.O2WR.Current:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 3x (byte CD) - Current for wide range/band oxygen sensor
  type: sensor
  unit: A

Vehicle.OBD.O2WR.Lambda:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 2x (byte AB) and PID 3x (byte AB) - Lambda for wide range/band oxygen sensor
  type: sensor

Vehicle.OBD.O2WR.Voltage:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 2x (byte CD) - Voltage for wide range/band oxygen sensor
  type: sensor
  unit: V

Vehicle.OBD.OBDStandards:
  datatype: uint8
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 1C - OBD standards this vehicle conforms to
  type: attribute

Vehicle.OBD.OilTemperature:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 5C - Engine oil temperature
  type: sensor
  unit: celsius

Vehicle.OBD.OxygenSensorsIn2Banks:
  datatype: uint8
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 13 - Presence of oxygen sensors in 2 banks. [A0..A3] == Bank 1, Sensors 1-4. [A4..A7] == Bank 2, Sensors 1-4
  type: sensor

Vehicle.OBD.OxygenSensorsIn4Banks:
  datatype: uint8
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 1D - Presence of oxygen sensors in 4 banks. Similar to PID 13, but [A0..A7] == [B1S1, B1S2, B2S1, B2S2, B3S1, B3S2, B4S1, B4S2]
  type: sensor

Vehicle.OBD.PidsA:
  allowed:
  - '01'
  - '02'
  - '03'
  - '04'
  - '05'
  - '06'
  - '07'
  - 08
  - 09
  - 0A
  - 0B
  - 0C
  - 0D
  - 0E
  - 0F
  - '10'
  - '11'
  - '12'
  - '13'
  - '14'
  - '15'
  - '16'
  - '17'
  - '18'
  - '19'
  - 1A
  - 1B
  - 1C
  - 1D
  - 1E
  - 1F
  - '20'
  datatype: string[]
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 00 - Array of the supported PIDs 01 to 20 in Hexadecimal.
  type: attribute

Vehicle.OBD.PidsB:
  allowed:
  - '21'
  - '22'
  - '23'
  - '24'
  - '25'
  - '26'
  - '27'
  - '28'
  - '29'
  - 2A
  - 2B
  - 2C
  - 2D
  - 2E
  - 2F
  - '30'
  - '31'
  - '32'
  - '33'
  - '34'
  - '35'
  - '36'
  - '37'
  - '38'
  - '39'
  - 3A
  - 3B
  - 3C
  - 3D
  - 3E
  - 3F
  - '40'
  datatype: string[]
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 20 - Array of the supported PIDs 21 to 40 in Hexadecimal.
  type: attribute

Vehicle.OBD.PidsC:
  allowed:
  - '41'
  - '42'
  - '43'
  - '44'
  - '45'
  - '46'
  - '47'
  - '48'
  - '49'
  - 4A
  - 4B
  - 4C
  - 4D
  - 4E
  - 4F
  - '50'
  - '51'
  - '52'
  - '53'
  - '54'
  - '55'
  - '56'
  - '57'
  - '58'
  - '59'
  - 5A
  - 5B
  - 5C
  - 5D
  - 5E
  - 5F
  - '60'
  datatype: string[]
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 40 - Array of the supported PIDs 41 to 60 in Hexadecimal.
  type: attribute

Vehicle.OBD.RelativeAcceleratorPosition:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 5A - Relative accelerator pedal position
  type: sensor
  unit: percent

Vehicle.OBD.RelativeThrottlePosition:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 45 - Relative throttle position
  type: sensor
  unit: percent

Vehicle.OBD.RunTime:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 1F - Engine run time
  type: sensor
  unit: s

Vehicle.OBD.RunTimeMIL:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 4D - Run time with MIL on
  type: sensor
  unit: min

Vehicle.OBD.ShortTermFuelTrim1:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 06 - Short Term (immediate) Fuel Trim - Bank 1 - negative percent leaner, positive percent richer
  type: sensor
  unit: percent

Vehicle.OBD.ShortTermFuelTrim2:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 08 - Short Term (immediate) Fuel Trim - Bank 2 - negative percent leaner, positive percent richer
  type: sensor
  unit: percent

Vehicle.OBD.ShortTermO2Trim1:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 55 (byte A) - Short term secondary O2 trim - Bank 1
  type: sensor
  unit: percent

Vehicle.OBD.ShortTermO2Trim2:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 57 (byte A) - Short term secondary O2 trim - Bank 2
  type: sensor
  unit: percent

Vehicle.OBD.ShortTermO2Trim3:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 55 (byte B) - Short term secondary O2 trim - Bank 3
  type: sensor
  unit: percent

Vehicle.OBD.ShortTermO2Trim4:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 57 (byte B) - Short term secondary O2 trim - Bank 4
  type: sensor
  unit: percent

Vehicle.OBD.Speed:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 0D - Vehicle speed
  type: sensor
  unit: km/h

Vehicle.OBD.Status:
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 01 - OBD status
  type: branch

Vehicle.OBD.Status.DTCCount:
  datatype: uint8
  deprecation: v5.0 replaced with Vehicle.Diagnostics.DTCCount
  description: Number of Diagnostic Trouble Codes (DTC)
  type: sensor

Vehicle.OBD.Status.IgnitionType:
  allowed:
  - SPARK
  - COMPRESSION
  datatype: string
  deprecation: v5.0 OBD-branch is deprecated.
  description: Type of the ignition for ICE - spark = spark plug ignition, compression = self-igniting (Diesel engines)
  type: attribute

Vehicle.OBD.Status.IsMILOn:
  datatype: boolean
  deprecation: v5.0 OBD-branch is deprecated.
  description: Malfunction Indicator Light (MIL) False = Off, True = On
  type: sensor

Vehicle.OBD.ThrottleActuator:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 4C - Commanded throttle actuator
  type: sensor
  unit: percent

Vehicle.OBD.ThrottlePosition:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 11 - Throttle position - 0 = closed throttle, 100 = open throttle
  type: sensor
  unit: percent

Vehicle.OBD.ThrottlePositionB:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 47 - Absolute throttle position B
  type: sensor
  unit: percent

Vehicle.OBD.ThrottlePositionC:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 48 - Absolute throttle position C
  type: sensor
  unit: percent

Vehicle.OBD.TimeSinceDTCCleared:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 4E - Time since trouble codes cleared
  type: sensor
  unit: min

Vehicle.OBD.TimingAdvance:
  datatype: float
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 0E - Time advance
  type: sensor
  unit: degrees

Vehicle.OBD.WarmupsSinceDTCClear:
  datatype: uint8
  deprecation: v5.0 OBD-branch is deprecated.
  description: PID 30 - Number of warm-ups since codes cleared
  type: sensor

Vehicle.Occupant:
  description: Occupant (Driver or Passenger) data.
  instances:
  - Row[1,2]
  - - DriverSide
    - Middle
    - PassengerSide
  type: branch

Vehicle.Occupant.HeadPosition:
  description: The current position of the driver head on vehicle axis according to ISO 23150:2023.
  type: branch

Vehicle.Occupant.HeadPosition.Pitch:
  datatype: float
  description: Head pitch angle, measured as angle from vehicle sprung mass XY-plane as defined by ISO 23150:2023 to the head X-axis. 0 = Head in normal position. Positive values = Head leaning up. Negative values = Head leaning down.
  max: 90
  min: -90
  type: sensor
  unit: degrees

Vehicle.Occupant.HeadPosition.Roll:
  datatype: float
  description: Head roll angle about the head X-axis (right-hand rule). 0 = Head in normal position. Positive values = Head leaning to the right. Negative values = Head leaning to the left.
  max: 180
  min: -180
  type: sensor
  unit: degrees

Vehicle.Occupant.HeadPosition.X:
  datatype: int16
  description: Longitudinal position of head center measured as mid eye position on X-axis of the vehicle rear-axle coordinate system as defined by ISO 23150:2023 section 3.7.12 Mid eye position refers to the center of a line drawn between the center of the drivers eyes. Positive values = forward of (first) rear-axle. Negative values = backward of (first) rear-axle.
  type: sensor
  unit: mm

Vehicle.Occupant.HeadPosition.Y:
  datatype: int16
  description: Lateral position of head center measured as mid eye position on X-axis of the vehicle rear-axle coordinate system as defined by ISO 23150:2023 section 3.7.12 Mid eye position refers to the center of a line drawn between the center of the drivers eyes. Positive values = left of rear-axle center. Negative values = right of rear-axle center.
  type: sensor
  unit: mm

Vehicle.Occupant.HeadPosition.Yaw:
  datatype: float
  description: Head yaw angle, measured from the vehicle sprung mass X-axis as defined by ISO 23150:2023 to the head X-axis, around the vehicle Z-axis (right-hand rule). 0 = Head in normal position. Positive values = Head turned left. Negative values = Head turned right.
  max: 180
  min: -180
  type: sensor
  unit: degrees

Vehicle.Occupant.HeadPosition.Z:
  datatype: int16
  description: Height position of head center measured as mid eye position on X-axis of the vehicle rear-axle coordinate system as defined by ISO 23150:2023 section 3.7.12 Mid eye position refers to the center of a line drawn between the center of the drivers eyes. Positive values = above center of rear-axle reference point. Negative values = below center of rear-axle reference point.
  type: sensor
  unit: mm

Vehicle.Occupant.Identifier:
  description: Identifier attributes based on OAuth 2.0.
  type: branch

Vehicle.Occupant.Identifier.Issuer:
  datatype: string
  description: Unique Issuer for the authentication of the occupant e.g. https://accounts.funcorp.com.
  type: sensor

Vehicle.Occupant.Identifier.Subject:
  datatype: string
  description: Subject for the authentication of the occupant e.g. UserID 7331677.
  type: sensor

Vehicle.Occupant.MidEyeGaze:
  description: Direction from mid eye position to object driver is looking at.
  type: branch

Vehicle.Occupant.MidEyeGaze.Azimuth:
  datatype: float
  description: Mid eye azimuth gaze (right-hand rule) on vehicle sprung mass Z-axis as defined by ISO 23150:2023 0 = Driver looking forward. Positive values = Driver looking at something on the left side of driver. Negative values = Driver looking at something on the right side of driver.
  max: 180
  min: -180
  type: sensor
  unit: degrees

Vehicle.Occupant.MidEyeGaze.Elevation:
  datatype: float
  description: Elevation to observed object measured as angle between vehicle sprung mass XY-plane as defined by ISO 23150:2023 at driver mid eye position and object. 0 = Driver looking at something at same height as mid eye position. Positive values = Driver looking at something above mid eye position. Negative values = Driver looking at something below mid eye position.
  max: 90
  min: -90
  type: sensor
  unit: degrees

Vehicle.PowerOptimizeLevel:
  datatype: uint8
  description: Power optimization level for this branch/subsystem. A higher number indicates more aggressive power optimization. Level 0 indicates that all functionality is enabled, no power optimization enabled. Level 10 indicates most aggressive power optimization mode, only essential functionality enabled.
  max: 10
  min: 0
  type: actuator

Vehicle.Powertrain:
  description: Powertrain data for battery management, etc.
  type: branch

Vehicle.Powertrain.AccumulatedBrakingEnergy:
  datatype: float
  description: The accumulated energy from regenerative braking over lifetime.
  type: sensor
  unit: kWh

Vehicle.Powertrain.CombustionEngine:
  description: Engine-specific data, stopping at the bell housing.
  type: branch

Vehicle.Powertrain.CombustionEngine.AspirationType:
  allowed:
  - UNKNOWN
  - NATURAL
  - SUPERCHARGER
  - TURBOCHARGER
  datatype: string
  default: UNKNOWN
  description: Type of aspiration (natural, turbocharger, supercharger etc).
  type: attribute

Vehicle.Powertrain.CombustionEngine.Bore:
  datatype: float
  description: Bore in millimetres.
  type: attribute
  unit: mm

Vehicle.Powertrain.CombustionEngine.CompressionRatio:
  datatype: string
  description: Engine compression ratio, specified in the format 'X:1', e.g. '9.2:1'.
  type: attribute

Vehicle.Powertrain.CombustionEngine.Configuration:
  allowed:
  - UNKNOWN
  - STRAIGHT
  - V
  - BOXER
  - W
  - ROTARY
  - RADIAL
  - SQUARE
  - H
  - U
  - OPPOSED
  - X
  datatype: string
  default: UNKNOWN
  description: Engine configuration.
  type: attribute

Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid:
  comment: In retail and marketing other names are typically used for the fluid.
  description: Signals related to Diesel Exhaust Fluid (DEF). DEF is called AUS32 in ISO 22241.
  type: branch

Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.Capacity:
  datatype: float
  description: Capacity in liters of the Diesel Exhaust Fluid Tank.
  type: attribute
  unit: l

Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.IsLevelLow:
  datatype: boolean
  description: Indicates if the Diesel Exhaust Fluid level is low. True if level is low. Definition of low is vehicle dependent.
  type: sensor

Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.Level:
  datatype: uint8
  description: Level of the Diesel Exhaust Fluid tank as percent of capacity. 0 = empty. 100 = full.
  max: 100
  min: 0
  type: sensor
  unit: percent

Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.Range:
  datatype: uint32
  description: Remaining range in meters of the Diesel Exhaust Fluid present in the vehicle.
  type: sensor
  unit: m

Vehicle.Powertrain.CombustionEngine.DieselParticulateFilter:
  description: Diesel Particulate Filter signals.
  type: branch

Vehicle.Powertrain.CombustionEngine.DieselParticulateFilter.DeltaPressure:
  datatype: float
  description: Delta Pressure of Diesel Particulate Filter.
  type: sensor
  unit: Pa

Vehicle.Powertrain.CombustionEngine.DieselParticulateFilter.InletTemperature:
  datatype: float
  description: Inlet temperature of Diesel Particulate Filter.
  type: sensor
  unit: celsius

Vehicle.Powertrain.CombustionEngine.DieselParticulateFilter.OutletTemperature:
  datatype: float
  description: Outlet temperature of Diesel Particulate Filter.
  type: sensor
  unit: celsius

Vehicle.Powertrain.CombustionEngine.Displacement:
  datatype: uint16
  description: Displacement in cubic centimetres.
  type: attribute
  unit: cm^3

Vehicle.Powertrain.CombustionEngine.ECT:
  datatype: float
  deprecation: v5.0 moved to EngineCoolant.Temperature
  description: Engine coolant temperature.
  type: sensor
  unit: celsius

Vehicle.Powertrain.CombustionEngine.EOP:
  datatype: uint16
  description: Engine oil pressure.
  type: sensor
  unit: kPa

Vehicle.Powertrain.CombustionEngine.EOT:
  datatype: float
  deprecation: v5.0 moved to EngineOil.Temperature
  description: Engine oil temperature.
  type: sensor
  unit: celsius

Vehicle.Powertrain.CombustionEngine.EngineCode:
  comment: For hybrid vehicles the engine code may refer to the combination of combustion and electric engine.
  datatype: string
  description: Engine code designation, as specified by vehicle manufacturer.
  type: attribute

Vehicle.Powertrain.CombustionEngine.EngineCoolant:
  description: Signals related to the engine coolant
  type: branch

Vehicle.Powertrain.CombustionEngine.EngineCoolant.Capacity:
  datatype: float
  description: Engine coolant capacity in liters.
  type: attribute
  unit: l

Vehicle.Powertrain.CombustionEngine.EngineCoolant.Level:
  allowed:
  - CRITICALLY_LOW
  - LOW
  - NORMAL
  datatype: string
  description: Engine coolant level.
  type: sensor

Vehicle.Powertrain.CombustionEngine.EngineCoolant.LifeRemaining:
  comment: In addition to this a signal a vehicle can report remaining time to service (including e.g. coolant change) by Vehicle.Service.TimeToService.
  datatype: int32
  description: Remaining engine coolant life in seconds. Negative values can be used to indicate that lifetime has been exceeded.
  type: sensor
  unit: s

Vehicle.Powertrain.CombustionEngine.EngineCoolant.Temperature:
  datatype: float
  description: Engine coolant temperature.
  type: sensor
  unit: celsius

Vehicle.Powertrain.CombustionEngine.EngineCoolantCapacity:
  datatype: float
  deprecation: v5.0 moved to EngineCoolant.Capacity
  description: Engine coolant capacity in liters.
  type: attribute
  unit: l

Vehicle.Powertrain.CombustionEngine.EngineHours:
  datatype: float
  description: Accumulated time during engine lifetime with 'engine speed (rpm) > 0'.
  type: sensor
  unit: h

Vehicle.Powertrain.CombustionEngine.EngineOil:
  description: Signals related to the engine oil
  type: branch

Vehicle.Powertrain.CombustionEngine.EngineOil.Capacity:
  datatype: float
  description: Engine oil capacity in liters.
  type: attribute
  unit: l

Vehicle.Powertrain.CombustionEngine.EngineOil.Level:
  allowed:
  - CRITICALLY_LOW
  - LOW
  - NORMAL
  - HIGH
  - CRITICALLY_HIGH
  datatype: string
  description: Engine oil level.
  type: sensor

Vehicle.Powertrain.CombustionEngine.EngineOil.LifeRemaining:
  comment: In addition to this a signal a vehicle can report remaining time to service (including e.g. oil change) by Vehicle.Service.TimeToService.
  datatype: int32
  description: Remaining engine oil life in seconds. Negative values can be used to indicate that lifetime has been exceeded.
  type: sensor
  unit: s

Vehicle.Powertrain.CombustionEngine.EngineOil.Temperature:
  datatype: float
  description: EOT, Engine oil temperature.
  type: sensor
  unit: celsius

Vehicle.Powertrain.CombustionEngine.EngineOilCapacity:
  datatype: float
  deprecation: v5.0 moved to EngineOil.Capacity
  description: Engine oil capacity in liters.
  type: attribute
  unit: l

Vehicle.Powertrain.CombustionEngine.EngineOilLevel:
  allowed:
  - CRITICALLY_LOW
  - LOW
  - NORMAL
  - HIGH
  - CRITICALLY_HIGH
  datatype: string
  deprecation: v5.0 moved to EngineOil.Level
  description: Engine oil level.
  type: sensor

Vehicle.Powertrain.CombustionEngine.IdleHours:
  comment: Vehicles may calculate accumulated idle time for an engine. It might be based on engine speed (rpm) below a certain limit or any other mechanism.
  datatype: float
  description: Accumulated idling time during engine lifetime. Definition of idling is not standardized.
  type: sensor
  unit: h

Vehicle.Powertrain.CombustionEngine.IsRunning:
  datatype: boolean
  description: Engine Running. True if engine is rotating (Speed > 0).
  type: sensor

Vehicle.Powertrain.CombustionEngine.MAF:
  datatype: uint16
  description: Grams of air drawn into engine per second.
  type: sensor
  unit: g/s

Vehicle.Powertrain.CombustionEngine.MAP:
  datatype: uint16
  description: Manifold absolute pressure possibly boosted using forced induction.
  type: sensor
  unit: kPa

Vehicle.Powertrain.CombustionEngine.MaxPower:
  datatype: uint16
  default: 0
  description: Peak power, in kilowatts, that engine can generate.
  type: attribute
  unit: kW

Vehicle.Powertrain.CombustionEngine.MaxTorque:
  datatype: uint16
  default: 0
  description: Peak torque, in newton meter, that the engine can generate.
  type: attribute
  unit: Nm

Vehicle.Powertrain.CombustionEngine.NumberOfCylinders:
  datatype: uint16
  description: Number of cylinders.
  type: attribute

Vehicle.Powertrain.CombustionEngine.NumberOfValvesPerCylinder:
  datatype: uint16
  description: Number of valves per cylinder.
  type: attribute

Vehicle.Powertrain.CombustionEngine.OilLifeRemaining:
  comment: In addition to this a signal a vehicle can report remaining time to service (including e.g. oil change) by Vehicle.Service.TimeToService.
  datatype: int32
  deprecation: v5.0 moved to EngineOil.LifeRemaining
  description: Remaining engine oil life in seconds. Negative values can be used to indicate that lifetime has been exceeded.
  type: sensor
  unit: s

Vehicle.Powertrain.CombustionEngine.Power:
  datatype: uint16
  description: Current engine power output. Shall be reported as 0 during engine breaking.
  type: sensor
  unit: kW

Vehicle.Powertrain.CombustionEngine.Speed:
  datatype: uint16
  description: Engine speed measured as rotations per minute.
  type: sensor
  unit: rpm

Vehicle.Powertrain.CombustionEngine.StrokeLength:
  datatype: float
  description: Stroke length in millimetres.
  type: attribute
  unit: mm

Vehicle.Powertrain.CombustionEngine.TPS:
  datatype: uint8
  description: Current throttle position.
  max: 100
  type: sensor
  unit: percent

Vehicle.Powertrain.CombustionEngine.Torque:
  comment: During engine breaking the engine delivers a negative torque to the transmission.
  datatype: int16
  description: Current engine torque. Shall be reported as a negative number during engine breaking.
  type: sensor
  unit: Nm

Vehicle.Powertrain.ElectricMotor:
  description: Electric Motor specific data.
  type: branch

Vehicle.Powertrain.ElectricMotor.CoolantTemperature:
  datatype: float
  deprecation: v5.0 moved to EngineCoolant.Temperature
  description: Motor coolant temperature (if applicable).
  type: sensor
  unit: celsius

Vehicle.Powertrain.ElectricMotor.EngineCode:
  datatype: string
  description: Engine code designation, as specified by vehicle manufacturer.
  type: attribute

Vehicle.Powertrain.ElectricMotor.EngineCoolant:
  description: Signals related to the engine coolant (if applicable).
  type: branch

Vehicle.Powertrain.ElectricMotor.EngineCoolant.Capacity:
  datatype: float
  description: Engine coolant capacity in liters.
  type: attribute
  unit: l

Vehicle.Powertrain.ElectricMotor.EngineCoolant.Level:
  allowed:
  - CRITICALLY_LOW
  - LOW
  - NORMAL
  datatype: string
  description: Engine coolant level.
  type: sensor

Vehicle.Powertrain.ElectricMotor.EngineCoolant.LifeRemaining:
  comment: In addition to this a signal a vehicle can report remaining time to service (including e.g. coolant change) by Vehicle.Service.TimeToService.
  datatype: int32
  description: Remaining engine coolant life in seconds. Negative values can be used to indicate that lifetime has been exceeded.
  type: sensor
  unit: s

Vehicle.Powertrain.ElectricMotor.EngineCoolant.Temperature:
  datatype: float
  description: Engine coolant temperature.
  type: sensor
  unit: celsius

Vehicle.Powertrain.ElectricMotor.MaxPower:
  datatype: uint16
  default: 0
  description: Peak power, in kilowatts, that motor(s) can generate.
  type: attribute
  unit: kW

Vehicle.Powertrain.ElectricMotor.MaxRegenPower:
  datatype: uint16
  default: 0
  description: Peak regen/brake power, in kilowatts, that motor(s) can generate.
  type: attribute
  unit: kW

Vehicle.Powertrain.ElectricMotor.MaxRegenTorque:
  datatype: uint16
  default: 0
  description: Peak regen/brake torque, in newton meter, that the motor(s) can generate.
  type: attribute
  unit: Nm

Vehicle.Powertrain.ElectricMotor.MaxTorque:
  datatype: uint16
  default: 0
  description: Peak power, in newton meter, that the motor(s) can generate.
  type: attribute
  unit: Nm

Vehicle.Powertrain.ElectricMotor.Power:
  datatype: int16
  description: Current motor power output. Negative values indicate regen mode.
  type: sensor
  unit: kW

Vehicle.Powertrain.ElectricMotor.Speed:
  datatype: int32
  description: Motor rotational speed measured as rotations per minute. Negative values indicate reverse driving mode.
  type: sensor
  unit: rpm

Vehicle.Powertrain.ElectricMotor.Temperature:
  datatype: float
  description: Motor temperature.
  type: sensor
  unit: celsius

Vehicle.Powertrain.ElectricMotor.TimeInUse:
  comment: Vehicles may define their READY state.
  datatype: float
  description: Accumulated time during engine lifetime when the vehicule state's is 'READY'.
  type: sensor
  unit: h

Vehicle.Powertrain.ElectricMotor.Torque:
  datatype: int16
  description: Current motor torque. Negative values indicate regen mode.
  type: sensor
  unit: Nm

Vehicle.Powertrain.FuelSystem:
  description: Fuel system data.
  type: branch

Vehicle.Powertrain.FuelSystem.AbsoluteLevel:
  datatype: float
  description: Current available fuel in the fuel tank expressed in liters.
  type: sensor
  unit: l

Vehicle.Powertrain.FuelSystem.AverageConsumption:
  datatype: float
  description: Average consumption in liters per 100 km.
  min: 0
  type: sensor
  unit: l/100km

Vehicle.Powertrain.FuelSystem.ConsumptionSinceLastRefuel:
  comment: Amount of fuel consumed since last refueling.
  datatype: float
  description: Fuel consumption since last refueling.
  type: sensor
  unit: l

Vehicle.Powertrain.FuelSystem.ConsumptionSinceStart:
  comment: A new trip is considered to start when engine gets enabled (e.g. LowVoltageSystemState in ON or START mode). A trip is considered to end when engine is no longer enabled. The signal may however keep the value of the last trip until a new trip is started.
  datatype: float
  description: Fuel amount in liters consumed since start of current trip.
  type: sensor
  unit: l

Vehicle.Powertrain.FuelSystem.HybridType:
  allowed:
  - UNKNOWN
  - NOT_APPLICABLE
  - STOP_START
  - BELT_ISG
  - CIMG
  - PHEV
  datatype: string
  default: UNKNOWN
  description: Defines the hybrid type of the vehicle.
  type: attribute

Vehicle.Powertrain.FuelSystem.InstantConsumption:
  datatype: float
  description: Current consumption in liters per 100 km.
  min: 0
  type: sensor
  unit: l/100km

Vehicle.Powertrain.FuelSystem.IsEngineStopStartEnabled:
  datatype: boolean
  description: Indicates whether eco start stop is currently enabled.
  type: sensor

Vehicle.Powertrain.FuelSystem.IsFuelLevelLow:
  datatype: boolean
  description: Indicates that the fuel level is low (e.g. <50km range).
  type: sensor

Vehicle.Powertrain.FuelSystem.IsFuelPortFlapOpen:
  datatype: boolean
  description: Status of the fuel port flap(s). True if at least one is open.
  type: actuator

Vehicle.Powertrain.FuelSystem.Range:
  datatype: uint32
  description: Remaining range in meters using only liquid fuel.
  type: sensor
  unit: m

Vehicle.Powertrain.FuelSystem.RefuelPortPosition:
  allowed:
  - FRONT_LEFT
  - FRONT_MIDDLE
  - FRONT_RIGHT
  - REAR_LEFT
  - REAR_MIDDLE
  - REAR_RIGHT
  - LEFT_FRONT
  - LEFT_MIDDLE
  - LEFT_REAR
  - RIGHT_FRONT
  - RIGHT_MIDDLE
  - RIGHT_REAR
  datatype: string[]
  description: Position of refuel port(s). First part indicates side of vehicle, second part relative position on that side.
  type: attribute

Vehicle.Powertrain.FuelSystem.RelativeLevel:
  datatype: uint8
  description: Level in fuel tank as percent of capacity. 0 = empty. 100 = full.
  max: 100
  min: 0
  type: sensor
  unit: percent

Vehicle.Powertrain.FuelSystem.SupportedFuel:
  allowed:
  - E5_95
  - E5_98
  - E10_95
  - E10_98
  - E85
  - B7
  - B10
  - B20
  - B30
  - B100
  - XTL
  - LPG
  - CNG
  - LNG
  - H2
  - OTHER
  comment: RON 95 is sometimes referred to as Super, RON 98 as Super Plus.
  datatype: string[]
  description: Detailed information on fuels supported by the vehicle. Identifiers originating from DIN EN 16942:2021-08, appendix B, with additional suffix for octane (RON) where relevant.
  type: attribute

Vehicle.Powertrain.FuelSystem.SupportedFuelTypes:
  allowed:
  - GASOLINE
  - DIESEL
  - E85
  - LPG
  - CNG
  - LNG
  - H2
  - OTHER
  comment: If a vehicle also has an electric drivetrain (e.g. hybrid) that will be obvious from the PowerTrain.Type signal.
  datatype: string[]
  description: High level information of fuel types supported
  type: attribute

Vehicle.Powertrain.FuelSystem.TankCapacity:
  datatype: float
  description: Capacity of the fuel tank in liters.
  type: attribute
  unit: l

Vehicle.Powertrain.FuelSystem.TimeRemaining:
  datatype: uint32
  description: Time remaining in seconds before the fuel tank is empty.
  type: sensor
  unit: s

Vehicle.Powertrain.IsAutoPowerOptimize:
  datatype: boolean
  description: Auto Power Optimization Flag When set to 'true', the system enables automatic power optimization, dynamically adjusting the power optimization level based on runtime conditions or features managed by the OEM. When set to 'false', manual control of the power optimization level is allowed.
  type: actuator

Vehicle.Powertrain.PowerOptimizeLevel:
  datatype: uint8
  description: Power optimization level for this branch/subsystem. A higher number indicates more aggressive power optimization. Level 0 indicates that all functionality is enabled, no power optimization enabled. Level 10 indicates most aggressive power optimization mode, only essential functionality enabled.
  max: 10
  min: 0
  type: actuator

Vehicle.Powertrain.Range:
  datatype: uint32
  description: Remaining range in meters using all energy sources available in the vehicle.
  type: sensor
  unit: m

Vehicle.Powertrain.TimeRemaining:
  datatype: uint32
  description: Time remaining in seconds before all energy sources available in the vehicle are empty.
  type: sensor
  unit: s

Vehicle.Powertrain.TractionBattery:
  description: Battery Management data.
  type: branch

Vehicle.Powertrain.TractionBattery.AccumulatedChargedEnergy:
  datatype: float
  description: The accumulated energy delivered to the battery during charging over lifetime of the battery.
  type: sensor
  unit: kWh

Vehicle.Powertrain.TractionBattery.AccumulatedChargedThroughput:
  datatype: float
  description: The accumulated charge throughput delivered to the battery during charging over lifetime of the battery.
  type: sensor
  unit: Ah

Vehicle.Powertrain.TractionBattery.AccumulatedConsumedEnergy:
  datatype: float
  description: The accumulated energy leaving HV battery for propulsion and auxiliary loads over lifetime of the battery.
  type: sensor
  unit: kWh

Vehicle.Powertrain.TractionBattery.AccumulatedConsumedThroughput:
  datatype: float
  description: The accumulated charge throughput leaving HV battery for propulsion and auxiliary loads over lifetime of the battery.
  type: sensor
  unit: Ah

Vehicle.Powertrain.TractionBattery.BatteryConditioning:
  description: Properties related to preparing the vehicle battery for charging or driving.
  type: branch

Vehicle.Powertrain.TractionBattery.BatteryConditioning.IsActive:
  comment: This signal is typically true when mode is not INACTIVE and time is within defined start/end times.
  datatype: boolean
  description: Indicates if battery conditioning is active (i.e. actively monitors battery temperature). True = Active. False = Inactive.
  type: sensor

Vehicle.Powertrain.TractionBattery.BatteryConditioning.IsOngoing:
  comment: When battery conditioning is active, but temperature is already within acceptable range so that no cooling or heating is needed then IsOngoing shall report False.
  datatype: boolean
  description: Indicating if battery conditioning is currently ongoing. Battery conditioning is considered ongoing when the battery conditioning system is actively heating or cooling the battery, or requesting heating or cooling.
  type: sensor

Vehicle.Powertrain.TractionBattery.BatteryConditioning.RequestedMode:
  allowed:
  - INACTIVE
  - FAST_CHARGING_PREPARATION
  - DRIVING_PREPARATION
  comment: The Mode and TargetTime can be used to calculate TargetTemperature and StartTime
  datatype: string
  description: Defines requested mode for battery conditioning. INACTIVE - Battery conditioning inactive. FAST_CHARGING_PREPARATION - Battery conditioning for fast charging. DRIVING_PREPARATION - Battery conditioning for driving.
  type: actuator

Vehicle.Powertrain.TractionBattery.BatteryConditioning.StartTime:
  comment: If the vehicle is asleep, this is the time the vehicle and the battery conditioning system must wake up and start monitoring the battery and if necessary start heating/cooling of the battery.
  datatype: string
  description: Start time for battery conditioning, formatted according to ISO 8601 with UTC time zone.
  type: actuator
  unit: iso8601

Vehicle.Powertrain.TractionBattery.BatteryConditioning.TargetTemperature:
  comment: Target temperature possibly differs between different modes as well as other factors. Allowed deviation from target temperature is implementation dependent.
  datatype: float
  description: Target temperature for battery conditioning.
  type: actuator
  unit: celsius

Vehicle.Powertrain.TractionBattery.BatteryConditioning.TargetTime:
  comment: For FAST_CHARGING mode this is typically the time when charging is supposed to start. For DRIVING mode this is typically the expected departure time. Battery conditioning will be deactivated when this time has passed.
  datatype: string
  description: Target time when conditioning shall be finished, formatted according to ISO 8601 with UTC time zone.
  type: actuator
  unit: iso8601

Vehicle.Powertrain.TractionBattery.CellVoltage:
  description: Voltage information for cells in the battery pack.
  type: branch

Vehicle.Powertrain.TractionBattery.CellVoltage.CellVoltages:
  comment: Cells are identified by relative position in array.
  datatype: float[]
  description: Array of cell voltages. Length or array shall correspond to number of cells in vehicle.
  type: sensor

Vehicle.Powertrain.TractionBattery.CellVoltage.IdMax:
  comment: Identifier is supposed to be relative index of the cell, starting with 0 the first cell.
  datatype: uint16
  description: Identifier of the battery cell with highest voltage.
  type: sensor

Vehicle.Powertrain.TractionBattery.CellVoltage.IdMin:
  comment: Identifier is supposed to be relative index of the cell, starting with 0 the first cell.
  datatype: uint16
  description: Identifier of the battery cell with lowest voltage.
  type: sensor

Vehicle.Powertrain.TractionBattery.CellVoltage.Max:
  datatype: float
  description: Current voltage of the battery cell with highest voltage.
  type: sensor
  unit: V

Vehicle.Powertrain.TractionBattery.CellVoltage.Min:
  datatype: float
  description: Current voltage of the battery cell with lowest voltage.
  type: sensor
  unit: V

Vehicle.Powertrain.TractionBattery.Charging:
  description: Properties related to battery charging.
  type: branch

Vehicle.Powertrain.TractionBattery.Charging.AveragePower:
  datatype: float
  description: Average charging power of last or current charging event.
  type: sensor
  unit: kW

Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent:
  description: Current charging current.
  type: branch

Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent.DC:
  datatype: float
  description: Current DC charging current at inlet. Negative if returning energy to grid.
  type: sensor
  unit: A

Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent.Phase1:
  datatype: float
  description: Current AC charging current (rms) at inlet for Phase 1. Negative if returning energy to grid.
  type: sensor
  unit: A

Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent.Phase2:
  datatype: float
  description: Current AC charging current (rms) at inlet for Phase 2. Negative if returning energy to grid.
  type: sensor
  unit: A

Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent.Phase3:
  datatype: float
  description: Current AC charging current (rms) at inlet for Phase 3. Negative if returning energy to grid.
  type: sensor
  unit: A

Vehicle.Powertrain.TractionBattery.Charging.ChargeLimit:
  datatype: uint8
  default: 100
  description: Target charge limit (state of charge) for battery.
  max: 100
  min: 0
  type: actuator
  unit: percent

Vehicle.Powertrain.TractionBattery.Charging.ChargeRate:
  datatype: float
  description: Current charging rate, as in kilometers of range added per hour.
  type: sensor
  unit: km/h

Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage:
  description: Current charging voltage, as measured at the charging inlet.
  type: branch

Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage.DC:
  datatype: float
  description: Current DC charging voltage at charging inlet.
  type: sensor
  unit: V

Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage.Phase1:
  datatype: float
  description: Current AC charging voltage (rms) at inlet for Phase 1.
  type: sensor
  unit: V

Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage.Phase2:
  datatype: float
  description: Current AC charging voltage (rms) at inlet for Phase 2.
  type: sensor
  unit: V

Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage.Phase3:
  datatype: float
  description: Current AC charging voltage (rms) at inlet for Phase 3.
  type: sensor
  unit: V

Vehicle.Powertrain.TractionBattery.Charging.ChargingPort:
  comment: If a vehicle has a single charging port, then use the instance AnyPosition.
  description: Properties related to a particular charging port available in the vehicle.
  instances:
  - - FrontLeft
    - FrontMiddle
    - FrontRight
    - RearLeft
    - RearMiddle
    - RearRight
    - AnyPosition
  type: branch

Vehicle.Powertrain.TractionBattery.Charging.ChargingPort.IsChargingCableConnected:
  datatype: boolean
  description: Indicates whether a charging cable is physically connected to a particular charging port or not.
  type: sensor

Vehicle.Powertrain.TractionBattery.Charging.ChargingPort.IsChargingCableLocked:
  comment: Locking of charging cable can be used to prevent unintentional removing during charging.
  datatype: boolean
  description: Is charging cable locked to prevent removal.
  type: actuator

Vehicle.Powertrain.TractionBattery.Charging.ChargingPort.IsFlapOpen:
  comment: True = at least one flap of this port is open, False = All flaps of this port are closed.
  datatype: boolean
  description: Status of the charging port flap(s).
  type: actuator

Vehicle.Powertrain.TractionBattery.Charging.ChargingPort.SupportedInletTypes:
  allowed:
  - IEC_TYPE_1_AC
  - IEC_TYPE_2_AC
  - IEC_TYPE_3_AC
  - IEC_TYPE_4_DC
  - IEC_TYPE_1_CCS_DC
  - IEC_TYPE_2_CCS_DC
  - TESLA_ROADSTER
  - TESLA_HPWC
  - TESLA_SUPERCHARGER
  - GBT_AC
  - GBT_DC
  - OTHER
  comment: A vehicle may have multiple charging ports. IEC_TYPE_1_AC refers to Type 1 as defined in IEC 62196-2. Also known as Yazaki or J1772 connector. IEC_TYPE_2_AC refers to Type 2 as defined in IEC 62196-2. Also known as Mennekes connector. IEC_TYPE_3_AC refers to Type 3 as defined in IEC 62196-2. Also known as Scame connector. IEC_TYPE_4_DC refers to AA configuration as defined in IEC 62196-3. Also known as Type 4 or CHAdeMO connector. IEC_TYPE_1_CCS_DC refers to EE Configuration as defined in IEC 62196-3. Also known as CCS1 or Combo1 connector. IEC_TYPE_2_CCS_DC refers to FF Configuration as defined in IEC 62196-3. Also known as CCS2 or Combo2 connector. TESLA_ROADSTER, TESLA_HPWC (High Power Wall Connector) and TESLA_SUPERCHARGER refer to non-standardized charging ports/methods used by Tesla. GBT_AC refers to connector specified in GB/T 20234.2. GBT_DC refers to connector specified in GB/T 20234.3. Also specified as BB Configuration in IEC 62196-3. OTHER shall be used for charging ports not included in
    the list above. For additional information see https://en.wikipedia.org/wiki/IEC_62196.
  datatype: string[]
  description: A list of the supported (i.e., available) charging inlets in a particular charging port. IEC types refer to IEC 62196,  GBT refers to  GB/T 20234.
  type: attribute

Vehicle.Powertrain.TractionBattery.Charging.EvseId:
  comment: Length of id between 7 and 37 characters. ZZ00000 to be used if SECC cannot provide id
  datatype: string
  description: EVSE charging point ID (without separators) of last or current charging event according to ISO 15118-2 Annex H.
  type: sensor

Vehicle.Powertrain.TractionBattery.Charging.IsCharging:
  datatype: boolean
  description: True if charging is ongoing. Charging is considered to be ongoing if energy is flowing from charger to vehicle.
  type: sensor

Vehicle.Powertrain.TractionBattery.Charging.IsDischarging:
  datatype: boolean
  description: True if discharging (vehicle to grid) is ongoing. Discharging is considered to be ongoing if energy is flowing from vehicle to charger/grid.
  type: sensor

Vehicle.Powertrain.TractionBattery.Charging.Location:
  comment: This may depending on implementation represent the location of (the charge port of) the vehicle during charging, or the actual location of the charger/load connected to the vehicle.
  description: Location of last or current charging event.
  type: branch

Vehicle.Powertrain.TractionBattery.Charging.Location.Altitude:
  datatype: double
  description: Altitude relative to WGS 84 reference ellipsoid of last or current charging event.
  type: sensor
  unit: m

Vehicle.Powertrain.TractionBattery.Charging.Location.Latitude:
  datatype: double
  description: Latitude of last or current charging event in WGS 84 geodetic coordinates.
  max: 90
  min: -90
  type: sensor
  unit: degrees

Vehicle.Powertrain.TractionBattery.Charging.Location.Longitude:
  datatype: double
  description: Longitude of last or current charging event in WGS 84 geodetic coordinates.
  max: 180
  min: -180
  type: sensor
  unit: degrees

Vehicle.Powertrain.TractionBattery.Charging.MaxPower:
  datatype: float
  description: Maximum charging power of last or current charging event.
  type: sensor
  unit: kW

Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent:
  description: Maximum charging current that can be accepted by the system, as measured at the charging inlet.
  type: branch

Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent.DC:
  datatype: float
  description: Maximum DC charging current at inlet that can be accepted by the system.
  type: sensor
  unit: A

Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent.Phase1:
  datatype: float
  description: Maximum AC charging current (rms) at inlet for Phase 1 that can be accepted by the system.
  type: sensor
  unit: A

Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent.Phase2:
  datatype: float
  description: Maximum AC charging current (rms) at inlet for Phase 2 that can be accepted by the system.
  type: sensor
  unit: A

Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent.Phase3:
  datatype: float
  description: Maximum AC charging current (rms) at inlet for Phase 3 that can be accepted by the system.
  type: sensor
  unit: A

Vehicle.Powertrain.TractionBattery.Charging.PowerLoss:
  datatype: float
  description: Electrical energy lost by power dissipation to heat inside the AC/DC converter.
  type: sensor
  unit: W

Vehicle.Powertrain.TractionBattery.Charging.StartStopCharging:
  allowed:
  - START
  - STOP
  datatype: string
  description: Start or stop the charging process.
  type: actuator

Vehicle.Powertrain.TractionBattery.Charging.Temperature:
  datatype: float
  description: Current temperature of AC/DC converter converting grid voltage to battery voltage.
  type: sensor
  unit: celsius

Vehicle.Powertrain.TractionBattery.Charging.TimeToComplete:
  comment: Shall consider time set by Charging.Timer.Time. E.g. if charging shall start in 3 hours and 2 hours of charging is needed, then Charging.TimeToComplete shall report 5 hours.
  datatype: uint32
  description: The time needed for the current charging process to reach Charging.ChargeLimit. 0 if charging is complete or no charging process is active or planned.
  type: sensor
  unit: s

Vehicle.Powertrain.TractionBattery.Charging.Timer:
  description: Properties related to timing of battery charging sessions.
  type: branch

Vehicle.Powertrain.TractionBattery.Charging.Timer.Mode:
  allowed:
  - INACTIVE
  - START_TIME
  - END_TIME
  datatype: string
  description: 'Defines timer mode for charging: INACTIVE - no timer set, charging may start as soon as battery is connected to a charger. START_TIME - charging shall start at Charging.Timer.Time. END_TIME - charging shall be finished (reach Charging.ChargeLimit) at Charging.Timer.Time. When charging is completed the vehicle shall change mode to ''inactive'' or set a new Charging.Timer.Time. Charging shall start immediately if mode is ''starttime'' or ''endtime'' and Charging.Timer.Time is a time in the past.'
  type: actuator

Vehicle.Powertrain.TractionBattery.Charging.Timer.Time:
  datatype: string
  description: Time for next charging-related action, formatted according to ISO 8601 with UTC time zone. Value has no significance if Charging.Timer.Mode is 'inactive'.
  type: actuator
  unit: iso8601

Vehicle.Powertrain.TractionBattery.CurrentCurrent:
  datatype: float
  description: Current current flowing in/out of battery. Positive = Current flowing in to battery, e.g. during charging. Negative = Current flowing out of battery, e.g. during driving.
  type: sensor
  unit: A

Vehicle.Powertrain.TractionBattery.CurrentPower:
  datatype: float
  description: Current electrical energy flowing in/out of battery. Positive = Energy flowing in to battery, e.g. during charging. Negative = Energy flowing out of battery, e.g. during driving.
  type: sensor
  unit: W

Vehicle.Powertrain.TractionBattery.CurrentVoltage:
  datatype: float
  description: Current Voltage of the battery.
  type: sensor
  unit: V

Vehicle.Powertrain.TractionBattery.DCDC:
  description: Properties related to DC/DC converter converting high voltage (from high voltage battery) to vehicle low voltage (supply voltage, typically 12 Volts).
  type: branch

Vehicle.Powertrain.TractionBattery.DCDC.PowerLoss:
  datatype: float
  description: Electrical energy lost by power dissipation to heat inside DC/DC converter.
  type: sensor
  unit: W

Vehicle.Powertrain.TractionBattery.DCDC.Temperature:
  datatype: float
  description: Current temperature of DC/DC converter converting battery high voltage to vehicle low voltage (typically 12 Volts).
  type: sensor
  unit: celsius

Vehicle.Powertrain.TractionBattery.ErrorCodes:
  comment: Error code format is not defined, it may be DTCs according to OBD II (SAE-J2012DA_201812) standard ([P|C|B|U]XXXXX ) or any other format.
  datatype: string[]
  description: Current error codes related to the battery, if any.
  type: sensor

Vehicle.Powertrain.TractionBattery.GrossCapacity:
  datatype: uint16
  description: Gross capacity of the battery.
  type: attribute
  unit: kWh

Vehicle.Powertrain.TractionBattery.Id:
  comment: This could be serial number, part number plus serial number, UUID, or any other identifier that the OEM want to use to uniquely identify the battery individual.
  datatype: string
  description: Battery Identification Number as assigned by OEM.
  type: attribute

Vehicle.Powertrain.TractionBattery.IsGroundConnected:
  comment: It might be possible to disconnect the traction battery used by an electric powertrain. This is achieved by connectors, typically one for plus and one for minus.
  datatype: boolean
  description: Indicating if the ground (negative terminator) of the traction battery is connected to the powertrain.
  type: sensor

Vehicle.Powertrain.TractionBattery.IsPowerConnected:
  comment: It might be possible to disconnect the traction battery used by an electric powertrain. This is achieved by connectors, typically one for plus and one for minus.
  datatype: boolean
  description: Indicating if the power (positive terminator) of the traction battery is connected to the powertrain.
  type: sensor

Vehicle.Powertrain.TractionBattery.MaxVoltage:
  datatype: uint16
  description: Max allowed voltage of the battery, e.g. during charging.
  type: attribute
  unit: V

Vehicle.Powertrain.TractionBattery.NetCapacity:
  datatype: uint16
  description: Total net capacity of the battery considering aging.
  type: sensor
  unit: kWh

Vehicle.Powertrain.TractionBattery.NominalVoltage:
  comment: Nominal voltage typically refers to voltage of fully charged battery when delivering rated capacity.
  datatype: uint16
  description: Nominal Voltage of the battery.
  type: attribute
  unit: V

Vehicle.Powertrain.TractionBattery.PowerLoss:
  datatype: float
  description: Electrical energy lost by power dissipation to heat inside the battery.
  type: sensor
  unit: W

Vehicle.Powertrain.TractionBattery.ProductionDate:
  datatype: string
  description: Production date of battery in ISO8601 format, e.g. YYYY-MM-DD.
  type: attribute
  unit: iso8601

Vehicle.Powertrain.TractionBattery.Range:
  datatype: uint32
  description: Remaining range in meters using only battery.
  type: sensor
  unit: m

Vehicle.Powertrain.TractionBattery.StateOfCharge:
  description: Information on the state of charge of the vehicle's high voltage battery.
  type: branch

Vehicle.Powertrain.TractionBattery.StateOfCharge.Current:
  datatype: float
  description: Physical state of charge of the high voltage battery, relative to net capacity. This is not necessarily the state of charge being displayed to the customer.
  max: 100.0
  min: 0
  type: sensor
  unit: percent

Vehicle.Powertrain.TractionBattery.StateOfCharge.CurrentEnergy:
  comment: Current energy could be calculated as .StateOfCharge.Current * .NetCapacity.
  datatype: float
  description: Physical state of charge of high voltage battery expressed in kWh.
  type: sensor
  unit: kWh

Vehicle.Powertrain.TractionBattery.StateOfCharge.Displayed:
  datatype: float
  description: State of charge displayed to the customer.
  max: 100.0
  min: 0
  type: sensor
  unit: percent

Vehicle.Powertrain.TractionBattery.StateOfHealth:
  comment: Exact formula is implementation dependent. Could be e.g. current capacity at 20 degrees Celsius divided with original capacity at the same temperature.
  datatype: float
  description: Calculated battery state of health at standard conditions.
  max: 100
  min: 0
  type: sensor
  unit: percent

Vehicle.Powertrain.TractionBattery.Temperature:
  description: Temperature Information for the battery pack.
  type: branch

Vehicle.Powertrain.TractionBattery.Temperature.Average:
  datatype: float
  description: Current average temperature of the battery cells.
  type: sensor
  unit: celsius

Vehicle.Powertrain.TractionBattery.Temperature.CellTemperature:
  comment: Cells are identified by relative position in array.
  datatype: float[]
  description: Array of cell temperatures. Length or array shall correspond to number of cells in vehicle.
  type: sensor

Vehicle.Powertrain.TractionBattery.Temperature.Max:
  datatype: float
  description: Current maximum temperature of the battery cells, i.e. temperature of the hottest cell.
  type: sensor
  unit: celsius

Vehicle.Powertrain.TractionBattery.Temperature.Min:
  datatype: float
  description: Current minimum temperature of the battery cells, i.e. temperature of the coldest cell.
  type: sensor
  unit: celsius

Vehicle.Powertrain.TractionBattery.TimeRemaining:
  datatype: uint32
  description: Time remaining in seconds before the battery is empty.
  type: sensor
  unit: s

Vehicle.Powertrain.Transmission:
  description: Transmission-specific data, stopping at the drive shafts.
  type: branch

Vehicle.Powertrain.Transmission.ClutchEngagement:
  datatype: float
  description: Clutch engagement. 0% = Clutch fully disengaged. 100% = Clutch fully engaged.
  max: 100
  min: 0
  type: actuator
  unit: percent

Vehicle.Powertrain.Transmission.ClutchWear:
  datatype: uint8
  description: Clutch wear as a percent. 0 = no wear. 100 = worn.
  max: 100
  type: sensor
  unit: percent

Vehicle.Powertrain.Transmission.CurrentGear:
  datatype: int8
  description: The current gear. 0=Neutral, 1/2/..=Forward, -1/-2/..=Reverse.
  type: sensor

Vehicle.Powertrain.Transmission.DiffLockFrontEngagement:
  datatype: float
  description: Front Diff Lock engagement. 0% = Diff lock fully disengaged. 100% = Diff lock fully engaged.
  max: 100
  min: 0
  type: actuator
  unit: percent

Vehicle.Powertrain.Transmission.DiffLockRearEngagement:
  datatype: float
  description: Rear Diff Lock engagement. 0% = Diff lock fully disengaged. 100% = Diff lock fully engaged.
  max: 100
  min: 0
  type: actuator
  unit: percent

Vehicle.Powertrain.Transmission.DriveType:
  allowed:
  - UNKNOWN
  - FORWARD_WHEEL_DRIVE
  - REAR_WHEEL_DRIVE
  - ALL_WHEEL_DRIVE
  datatype: string
  default: UNKNOWN
  description: Drive type.
  type: attribute

Vehicle.Powertrain.Transmission.GearChangeMode:
  allowed:
  - MANUAL
  - AUTOMATIC
  datatype: string
  description: Is the gearbox in automatic or manual (paddle) mode.
  type: actuator

Vehicle.Powertrain.Transmission.GearCount:
  datatype: int8
  default: 0
  description: Number of forward gears in the transmission. -1 = CVT.
  type: attribute

Vehicle.Powertrain.Transmission.IsElectricalPowertrainEngaged:
  comment: In some hybrid solutions it is possible to disconnect/disengage the electrical powertrain mechanically to avoid induced voltage reaching a too high level when driving at high speed.
  datatype: boolean
  description: Is electrical powertrain mechanically connected/engaged to the drivetrain or not. False = Disconnected/Disengaged. True = Connected/Engaged.
  type: actuator

Vehicle.Powertrain.Transmission.IsLowRangeEngaged:
  comment: The possibility to switch between low and high gear range is typically only available in heavy vehicles and off-road vehicles.
  datatype: boolean
  description: Is gearbox in low range mode or not. False = Normal/High range engaged. True = Low range engaged.
  type: actuator

Vehicle.Powertrain.Transmission.IsParkLockEngaged:
  datatype: boolean
  description: Is the transmission park lock engaged or not. False = Disengaged. True = Engaged.
  type: actuator

Vehicle.Powertrain.Transmission.PerformanceMode:
  allowed:
  - NORMAL
  - SPORT
  - ECONOMY
  - SNOW
  - RAIN
  datatype: string
  description: Current gearbox performance mode.
  type: actuator

Vehicle.Powertrain.Transmission.SelectedGear:
  datatype: int8
  description: The selected gear. 0=Neutral, 1/2/..=Forward, -1/-2/..=Reverse, 126=Park, 127=Drive.
  type: actuator

Vehicle.Powertrain.Transmission.Temperature:
  datatype: float
  description: The current gearbox temperature.
  type: sensor
  unit: celsius

Vehicle.Powertrain.Transmission.TorqueDistribution:
  datatype: float
  description: Torque distribution between front and rear axle in percent. -100% = Full torque to front axle, 0% = 50:50 Front/Rear, 100% = Full torque to rear axle.
  max: 100
  min: -100
  type: actuator
  unit: percent

Vehicle.Powertrain.Transmission.TravelledDistance:
  datatype: float
  description: Odometer reading, total distance travelled during the lifetime of the transmission.
  type: sensor
  unit: km

Vehicle.Powertrain.Transmission.Type:
  allowed:
  - UNKNOWN
  - SEQUENTIAL
  - H
  - AUTOMATIC
  - DSG
  - CVT
  datatype: string
  default: UNKNOWN
  description: Transmission type.
  type: attribute

Vehicle.Powertrain.Type:
  allowed:
  - COMBUSTION
  - HYBRID
  - ELECTRIC
  comment: For vehicles with a combustion engine (including hybrids) more detailed information on fuels supported can be found in FuelSystem.SupportedFuelTypes and FuelSystem.SupportedFuels.
  datatype: string
  description: Defines the powertrain type of the vehicle.
  type: attribute

Vehicle.RoofLoad:
  datatype: int16
  description: The permitted total weight of cargo and installations (e.g. a roof rack) on top of the vehicle.
  type: attribute
  unit: kg

Vehicle.Service:
  description: Service data.
  type: branch

Vehicle.Service.DistanceToService:
  datatype: float
  description: Remaining distance to service (of any kind). Negative values indicate service overdue.
  type: sensor
  unit: km

Vehicle.Service.IsServiceDue:
  datatype: boolean
  description: Indicates if vehicle needs service (of any kind). True = Service needed now or in the near future. False = No known need for service.
  type: sensor

Vehicle.Service.TimeToService:
  datatype: int32
  description: Remaining time to service (of any kind). Negative values indicate service overdue.
  type: sensor
  unit: s

Vehicle.Speed:
  datatype: float
  description: Vehicle speed.
  type: sensor
  unit: km/h

Vehicle.StartTime:
  comment: This signal is supposed to be set whenever a new trip starts. A new trip is considered to start when engine gets enabled (e.g. LowVoltageSystemState in ON or START mode). A trip is considered to end when engine is no longer enabled. The default value indicates that the vehicle never has been started, or that latest start time is unknown.
  datatype: string
  default: 0000-01-01T00:00Z
  description: Start time of current or latest trip, formatted according to ISO 8601 with UTC time zone.
  type: attribute
  unit: iso8601

Vehicle.Trailer:
  description: Trailer signals.
  type: branch

Vehicle.Trailer.IsConnected:
  datatype: boolean
  description: Signal indicating if trailer is connected or not.
  type: sensor

Vehicle.TraveledDistance:
  datatype: float
  description: Odometer reading, total distance traveled during the lifetime of the vehicle.
  type: sensor
  unit: km

Vehicle.TraveledDistanceSinceStart:
  comment: A new trip is considered to start when engine gets enabled (e.g. LowVoltageSystemState in ON or START mode). A trip is considered to end when engine is no longer enabled. The signal may however keep the value of the last trip until a new trip is started.
  datatype: float
  description: Distance traveled since start of current trip.
  type: sensor
  unit: km

Vehicle.TripDuration:
  comment: This signal is not assumed to be continuously updated, but instead set to 0 when a trip starts and set to the actual duration of the trip when a trip ends. A new trip is considered to start when engine gets enabled (e.g. LowVoltageSystemState in ON or START mode). A trip is considered to end when engine is no longer enabled.
  datatype: float
  description: Duration of latest trip.
  type: sensor
  unit: s

Vehicle.TripMeterReading:
  comment: The trip meter is an odometer that can be manually reset by the driver
  datatype: float
  description: Trip meter reading.
  type: actuator
  unit: km

Vehicle.TurningDiameter:
  datatype: uint16
  description: Minimum turning diameter, Wall-to-Wall, as defined by SAE J1100-2009 D102.
  type: attribute
  unit: mm

Vehicle.VehicleIdentification:
  description: Attributes that identify a vehicle.
  type: branch

Vehicle.VehicleIdentification.AcrissCode:
  datatype: string
  description: The ACRISS Car Classification Code is a code used by many car rental companies.
  type: attribute

Vehicle.VehicleIdentification.BodyType:
  datatype: string
  description: Indicates the design and body style of the vehicle (e.g. station wagon, hatchback, etc.).
  type: attribute

Vehicle.VehicleIdentification.Brand:
  datatype: string
  description: Vehicle brand or manufacturer.
  type: attribute

Vehicle.VehicleIdentification.DateVehicleFirstRegistered:
  datatype: string
  description: The date in ISO 8601 format of the first registration of the vehicle with the respective public authorities.
  type: attribute
  unit: iso8601

Vehicle.VehicleIdentification.KnownVehicleDamages:
  datatype: string
  description: A textual description of known damages, both repaired and unrepaired.
  type: attribute

Vehicle.VehicleIdentification.LicensePlate:
  comment: Depending on the context, this attribute might not be up to date or might be misconfigured, and therefore should be considered untrustworthy in the absence of another method of verification.
  datatype: string
  description: The license plate of the vehicle.
  type: attribute

Vehicle.VehicleIdentification.MeetsEmissionStandard:
  datatype: string
  description: Indicates that the vehicle meets the respective emission standard.
  type: attribute

Vehicle.VehicleIdentification.Model:
  datatype: string
  description: Vehicle model.
  type: attribute

Vehicle.VehicleIdentification.OptionalExtras:
  comment: Allowed values are not standardized, each OEM can specify detail descriptions of array elements.
  datatype: string[]
  description: Optional extras refers to all car equipment options that are not installed as standard by the manufacturer.
  type: attribute

Vehicle.VehicleIdentification.ProductionDate:
  datatype: string
  description: The date in ISO 8601 format of production of the item, e.g. vehicle.
  type: attribute
  unit: iso8601

Vehicle.VehicleIdentification.PurchaseDate:
  datatype: string
  description: The date in ISO 8601 format of the item e.g. vehicle was purchased by the current owner.
  type: attribute
  unit: iso8601

Vehicle.VehicleIdentification.VIN:
  datatype: string
  description: 17-character Vehicle Identification Number (VIN) as defined by ISO 3779.
  pattern: ^([0-9A-HJ-NPR-Z]{3})([0-9A-HJ-NPR-Z]{6})([0-9A-HJ-NPR-Z]{4}[0-9]{4})$
  type: attribute

Vehicle.VehicleIdentification.VehicleConfiguration:
  datatype: string
  description: A short text indicating the configuration of the vehicle, e.g. '5dr hatchback ST 2.5 MT 225 hp' or 'limited edition'.
  type: attribute

Vehicle.VehicleIdentification.VehicleExteriorColor:
  datatype: string
  description: The main color of the exterior within the basic color palette (eg. red, blue, black, white, ...).
  type: attribute

Vehicle.VehicleIdentification.VehicleInteriorColor:
  datatype: string
  description: The color or color combination of the interior of the vehicle.
  type: attribute

Vehicle.VehicleIdentification.VehicleInteriorType:
  datatype: string
  description: The type or material of the interior of the vehicle (e.g. synthetic fabric, leather, wood, etc.).
  type: attribute

Vehicle.VehicleIdentification.VehicleModelDate:
  datatype: string
  description: The release date in ISO 8601 format of a vehicle model (often used to differentiate versions of the same make and model).
  type: attribute
  unit: iso8601

Vehicle.VehicleIdentification.VehicleSeatingCapacity:
  datatype: uint16
  description: The number of passengers that can be seated in the vehicle, both in terms of the physical space available, and in terms of limitations set by law.
  type: attribute

Vehicle.VehicleIdentification.VehicleSpecialUsage:
  datatype: string
  description: Indicates whether the vehicle has been used for special purposes, like commercial rental, driving school.
  type: attribute

Vehicle.VehicleIdentification.WMI:
  datatype: string
  description: 3-character World Manufacturer Identification (WMI) as defined by ISO 3780.
  type: attribute

Vehicle.VehicleIdentification.Year:
  datatype: uint16
  description: Model year of the vehicle.
  type: attribute

Vehicle.VersionVSS:
  description: Supported Version of VSS.
  type: branch

Vehicle.VersionVSS.Label:
  comment: COVESA VSS project typically use dev for latest master, and empty string for released versions.
  datatype: string
  default: dev
  description: Label to further describe the version.
  type: attribute

Vehicle.VersionVSS.Major:
  datatype: uint32
  default: 6
  description: Supported Version of VSS - Major version.
  type: attribute

Vehicle.VersionVSS.Minor:
  datatype: uint32
  default: 0
  description: Supported Version of VSS - Minor version.
  type: attribute

Vehicle.VersionVSS.Patch:
  datatype: uint32
  default: 0
  description: Supported Version of VSS - Patch version.
  type: attribute

Vehicle.WidthExcludingMirrors:
  datatype: uint16
  default: 0
  description: Overall vehicle width excluding mirrors, as defined by SAE J1100-2009 W103.
  type: attribute
  unit: mm

Vehicle.WidthFoldedMirrors:
  datatype: uint16
  description: Overall vehicle width with mirrors folded, as defined by SAE J1100-2009 W145.
  type: attribute
  unit: mm

Vehicle.WidthIncludingMirrors:
  datatype: uint16
  description: Overall vehicle width including mirrors, as defined by SAE J1100-2009 W144.
  type: attribute
  unit: mm
